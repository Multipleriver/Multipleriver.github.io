[{"content":" 1 2 3 4 5 6 [修订记录] - 2023.11.05 - 完成初稿 部分内容未展开 习近平新时代中国特色社会主义思想是一门新课，故没有详细学习 希望能帮助理解“马克思主义中国化”这一概念 马克思主义中国化时代化 马克思主义的形成与发展 graph LR A[马克思主义] --\u003e B[马克思主义哲学] A--\u003e C[马克思主义政治经济学] A--\u003e D[科学社会主义]\r1842.2《共产党宣言》的发表，标志着马克思主义科学体系的形成。\n1938.10 毛泽东 六届六中全会 《论新阶段》 正式向全党提出“马克思主义中国化”\n马克思主义中国化的内涵 定义 马克思主义基本原理 + 中国具体实际、中华优秀传统文化\n运用马克思主义的立场、观点、方法研究和解决中国革命、建设和改革中的实际问题\n提出 “马克思主义中国化”作为一种实践活动，从五四运动前后马克思主义传入中国后就已开始；但作为中国共产党“辞典”中一个特定概念则是在1938年中共六届六中全会上正式提出的。\n“中国化的马克思主义” 1945年5月，中共七大通过的《中国共产党章程》 明确提出并使用“中国化的马克思主义”这一概念。\n区别 “马克思主义中国化” 是指“马克思主义”和我国具体特点相结合”的过程。\n“中国化的马克思主义”则是指具有中国特点和民族形式的、揭示中国革命和建设特点、规律的科学理论， 是中国共产党人对马克思主义的理论创新， 为新的实践提供有力的理论指导， 即中国式的马克思主义。\n联系 “中国化的马克思主义”只能产生于和发展于“马克思主义中国化”的过程之中， 是“马克思主义中国化”的历史结晶和升华， 是马克思主义与时俱进理论品格最显著、最集中的体现。\n“马克思主义中国化”的结果，必然产生、形成和发展中国化的马克思主义理论。 马克思主义中国化的过程，就是中国化的马克思主义理论形成、发展并不断创新的过程。\n这两个过程是完全一致的。\n马克思主义中国化的理论成果 graph TD A[马克思主义中国化的理论成果] --\u003e B[毛泽东思想] A--\u003e C[中国特色社会主义理论体系] C--\u003e D[邓小平理论] C--\u003e E[\"“三个代表”重要思想\"] C--\u003e F[科学发展观] C--\u003e G[习近平新时代中国特色社会主义思想]\r毛泽东思想与中国特色社会主义体系之间的关系 区别 形成的时代背景不同 需要解决的根本问题和主体内容不同 需要解决的社会主要矛盾和根本任务不同 联系 毛泽东思想是中国特色社会主义理论体系的主要思想渊源。 中国特色社会主义理论体系在新的历史条件下进一步丰富和发展了毛泽东思想。 毛泽东思想和中国特色社会主义理论体系都是马克思列宁主义在中国的运用和发展。 毛泽东思想的形成和发展 毛泽东的历史功绩 创立发展共产党 创立发展解放军 创立毛泽东思想 缔造中华人民共和国 确立了社会主义制度 毛泽东的功与过 “功绝对大于过”——石仲泉\n1981.6 十一6 《关于建国以来党的若干历史问题的决议》\n历史条件 思想条件 新文化运动 马列主义的传播 阶级基础 工人阶级壮大 工人运动发展 实践平台 中国共产党领导的人民革命和社会建设 形成过程 萌芽 1924-1927 第一次国内革命（北伐） 《中国社会各阶级的分析》 《湖南农民运动考察报告》 形成 1927-1937 第二次国内革命（土地革命） 提出并阐述“农村包围城市，武装夺取政权” 《中国红色政权为什么能够存在》 《井冈山的斗争》 1929.12 古田会议 思想建党，政治建军 1930《星星之火可以燎原》 1930《反对本本主义》：毛泽东思想形成的标志 成熟 1937-1945 抗日战争时期 1943.7.8《中国共产党与中国民族解放的道路》中正式提出： 毛泽东思想就是中国的马克思列宁主义，中国的布尔什维克主义，中国的共产主义。\n——王稼祥\n发展 1945-1949 第三次国内革命 解放战争 1949-1956 社会主义改造 1956-1978 建设初期 《论十大关系》 《论人民民主专政》 主要内容和活的灵魂 主要内容 1981.6《中共中央关于建国以来若干重大历史问题的决议》\n新民主主义革命理论 社会主义革命和社会主义建设理论 革命军队建设和军事战略的理论 政策和策略的理论 思想政治工作和文化工作的理论 党的建设理论 活的灵魂 1981.6《中共中央关于建国以来若干重大历史问题的决议》 贯穿各个部分（上面6个部分）的立场、观点和方法\n实事求是 群众路线 独立自主 南泥湾精神 三者关系 三者相互依赖、相互制约。 实事求是是群众路线的理论基础和必然要求，\n是独立自主的根本依据和可靠保证； 群众路线是实事求是的根本体现和根本途径，\n是独立自主的力量源泉所在； 独立自主以实事求是和群众路线为前提， 同时也是坚持实事求是的必然体现和群众路线的必然归宿。 历史地位 马克思主义中国化的第一次重大成果 革命和建设的指南 宝贵精神财富 新民主主义理论 形成 依据 近代中国基本国情 社会性质（两半）、主要矛盾（两大）、基本任务（推翻三座大山） 认清中国国情乃是认清和解决一切革命问题的基本的依据。\n——1939.12《中国革命和中国共产党》\n基本国情\n两半社会 1840-1919-1949 基本特点\n半殖民地 形式上独立自主、实际上经济政治军事受控 区域发展不平衡的历史原因之一 半封建 形式上封建统治和自然经济占主导、实际上社会逐渐近代化 自然经济解体，但封建剥削还在，同买办资本和高利贷资本剥削结合一起，经济社会生活占明显优势 民族资本主义发展，但不是主要形式，力量软弱，国外联系 发展曲线图 1860-1895 夹缝产生 1895-1913 初步发展 原因：戊戌变法、辛亥革命 1913-1919 短暂春天 原因：一战、新文化运动 1919-1927 1927-1937 短暂发展 原因：土地革命、打土豪分田地 1937-1945 1945-1949 日益萎缩 皇族专制被推翻\u0026ndash;\u0026gt;地主阶级军阀官僚统治\u0026ndash;\u0026gt;地主阶级和大资产联盟专政 近代中国的时代特征 中国民主主义革命的任务\ngraph TD A[\"社会性质：半殖民地半封建\"] --\u003e B[\"主要矛盾：帝国主义与中华民族、封建主义与人民大众\"] B--\u003e C[\"根本任务：推翻三座大山\"]\r民主主义革命的划分 旧民主主义革命 1840-1919 属于世界资产阶级民主主义革命\n1917十月革命胜利 开辟了世界无产阶级社会主义革命的新纪元 人类历史由资本主义向社会主义转变\n新民主主义革命 1919-1949 属于世界无产阶级社会主义革命\n实践基础 graph TD A[旧民主主义革命的失败] --\u003e B[新民主主义革命理论的实践基础] C[新民主主义革命艰辛探索]--\u003e B\r形成过程 总路线和基本纲领 总路线 1939 《中国革命和中国共产党》：提出新民主主义革命 1940 《新民主主义论》：标志毛泽东思想成熟 1948 《在晋绥干部会议的讲话》：提出总路线 无产阶级领导的人民大众的反对帝国主义封建主义官僚资本主义的革命\n——《在晋绥干部会议的讲话》\n对象：革谁的命 graph LR A[帝国主义] --\u003e B[\"第一个敌人，最凶恶的敌人\"] D[封建主义]--\u003e C[帝国主义统治中国的主要社会基础] E[官僚资本主义]--\u003e F[\"大资产阶级竭力扩张官僚资本，企图扼杀中国革命\"]\r动力：谁来革命 无产阶级：领导力量 农民阶级：主力军 城市小资产阶级：可靠的同盟者（知识分子、小商人、手工业者、自由职业者） 民族资产阶级：革命动力之一（革命出钱出力） 两重性 革命性： 受帝国主义的压迫、封建主义的束缚，同帝国主义和封建主义有矛盾 软弱性和妥协性： 与帝国主义、封建主义有千丝万缕的联系，又没有彻底反帝反封建勇气 三大改造：利用 限制 改造 性质 一种新式的、特殊的资产阶级民主革命\n新式：革命任务是反帝、反封建 资产阶级革命：参与者包括资产阶级 特点 新的革命前途 新的领导阶级 新的革命时代 新的指导思想 和社会主义革命的关系 graph LR A[中国共产党领导的整个中国革命运动] --\u003e |资产阶级性质的|B[新民主主义革命] --\u003e C(必要准备) A[中国共产党领导的整个中国革命运动] --\u003e |无产阶级性质的|D[社会主义革命] --\u003e E(必然趋势)\r基本纲领 政治纲领 内容 推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义共和国\n国体 无产阶级领导的、以工农联盟为基础的、反对帝国主义、封建主义、官僚资本主义的各个革命阶级联合专政的共和国\n政体 民主集中制的人民代表大会制度\n经济纲领 内容 没收地主阶级的土地归农民所有——新民主革命的中心内容 没收四大家族为首的垄断资本归新民主主义国家所有——具有新民主主义革命和社会主义双重性质 保护民族工商业——民族工商业的两面性 利用 有利于国计民生的积极一面 限制 剥削工人、惟利是图的消极一面 文化纲领 内容 创造无产阶级领导的，人民大众的，反帝、反封建、反官僚资本主义的文化，即民族的、科学的、大众的文化\n民族的：反对帝国主义压迫，主张中华民族的尊严和独立的 科学的：反对一切封建、迷信思想，主张实事求是、客观真理、理论和实践一致 大众的：民主的、为人民大众服务、有力思想武器 道路 农村包围城市，武装夺取政权\n农村包围城市 1927.7 大革命失败后的形势看，敌人的统治力量主要集中在城市， 农村是敌人力量的薄弱环节，必须建立农村革命根据地。广大农村农民深受反动统治阶级的多重压迫和剥削，人民革命愿望强烈，群众基础好。\n1927.9 湘赣边界秋收起义，第一次在武装斗争中公开打出中国共产党旗帜，在全国人民面前表明了独立领导革命战争的决心。起义受挫后，毛泽东从实际情况出发，毅然改变了原定进攻并夺取长沙的计划，及时率领工农革命军向国民党统治薄弱的农村进军，建立井冈山革命根据地，以保存和发展革命力量的道路。\n1928.4 毛泽东率领的秋收起义部队与朱德、陈毅领导的部分南昌起义部队在井冈山的胜利会师，是中国人民解放军建军史上的重要历史事件。它壮大了井冈山的革命武装力量，对巩固扩大全国第一个农村革命根据地，推动全国革命事业的发展具有深远的意义。\n武装夺取政权 1927.8.1 中国共产党领导部分国民革命军在江西南昌打响了武装反抗国民党反动派的第一枪，揭开了中国共产党独立领导武装斗争和创建革命军队的序幕。\n1927.8.7 中国共产党中央委员会在汉口召开紧急会议，即“八七会议”，纠正和结束了陈独秀的右倾机会主义，确定了实行武装起义和土地革命的方针。毛泽东提出了著名的“枪杆子里出政权”的论断。从此，党开始把创建人民武装、领导军事斗争作为工作重心。\n近代中国是一个农业大国，农民占全国人口 90% 以上，是革命主力军和军队来源。中国革命进行长期的武装斗争，主要是中国共产党领导之下的农民游击战争。所以想要充分发动农民的力量，就要从解决农民的土地问题入手，进行土地革命，获得广大农民支持和参加。\n基本经验——三大法宝 毛泽东在《〈共产党人〉发刊词》（1939）、《论人民民主专政》（1949）正式提出\ngraph LR A[三大法宝] --\u003e|基本条件| B[统一战线] A --\u003e |斗争形式| C[武装斗争] A --\u003e |根本保证| D[党的建设]\r统一战线 建立统一战线的必然性与可能性 必然性\n中国社会“两头小、中间大”的阶级状况 graph TD A[无产阶级] --\u003eB[\"农民阶级、城市小资产阶级、民族资产阶级\"] B --\u003e C[\"大资产阶级、地主阶级\"]\r中国革命的长期性、残酷性及其发展的不平衡 可能性\n工人阶级、农民阶级、城市小资产阶级在根本利益上具有一致性，使统一战线有了基本力量 民族资产阶级具有两重性，其要求反帝反封建的革命性的一面为无产阶级与之建立统一战线提供了可能 半殖民地半封建的中国社会内部各利益集团存在矛盾，客观上为革命力量提供了利用矛盾建立和发展统一战线可能 军阀割据，多个帝国主义间接统治，国家四分五裂，导致社会发展极端不平衡，提供了缝隙和可能 统一战线的组成 graph LR A[革命统一战线] --\u003e|基础和依靠力量| B[\"工人阶级同农民阶级（工农联盟是主要）、知识分子和其他劳动者的联盟\"] A --\u003e |辅助的、不可缺少的| C[\"工人阶级和非劳动者的联盟，主要是同民族资产阶级的联盟\"]\r统一战线的沿革 基本原则和策略方针 坚持无产阶级领导权原则 统一战线中独立自主原则 发展进步势力、争取中间势力、孤立顽固势力的策略总方针 又联合又斗争的的方针 武装斗争 党的建设 党的性质：中国共产党是中国工人阶级的先锋队，同时是全民族的先锋队。\n党的宗旨：全心全意为人民服务\n“两个先锋队”思想的提出，有利于中国共产党在增强阶级基础的同时，不断扩大自己的群众基础，增强党的影响力和凝聚力。\n党的建设的基本经验 把思想建设放在首位 必须普遍深入地学习和研究马克思主义理论 充分发挥党的思想政治工作的作用 组织建设是党的建设的关键 联系实际加强作风建设 三大作风：中国共产党区别于其他政党的显著标志 理论联系实际 密切联系群众 批评与自我批评 中国革命经验的总结 时期 内容 党的成立 一大（1921） 马克思主义与中国实际相结合 二大 民主革命时期的纲领 三大 国共合作统一战线 四大 无产阶级领导权和农民同盟军 大革命失败（1927） 枪杆子里出政权、工农武装割据、农村包围城市、统一战线 抗日战争（1937-1945） 新民主主义革命理论、三大法宝 解放战争（1945-1949） 新民主主义向社会主义转变 三大法宝的相互关系 三者密切联系、相互依赖：\n党是武装斗争、统一战线的领导者 武装斗争、统一战线是党战胜敌人的基本武器， 党是掌握这两个基本武器以实行对敌斗争的战士 统一战线只有以武装斗争为支柱，才能存在和发展 武装斗争只有以统一战线为基础，特别是以工农联盟为基础，才能发展壮大和不断胜利 意义 只有社会主义才能救中国\n社会主义改造理论 几个问题\n中华人民共和国的成立是否意味着中国进入了社会主义社会？ 为什么要进行社会主义改造？改造什么？ 中国确立社会主义制度的意义何在？ 过渡时期 过渡时期的定义：1949-1956是新民主到社会主义的过渡时期\ngraph LR A[新民主主义社会] --\u003e|建国之前| B[部分地区] B--\u003eD(已经在尝试社会主义改造) A --\u003e |建国之后| C[全部地区]\r“过渡时期”这个概念，是马克思主义原理和列宁的具体的革命实践为我们提供的理论依据。\n“卡夫丁峡谷”最初出自古罗马史典故，后被引申为在谋求发展时遇到的极大困难挑战。他还指出：这一设想不仅适用于俄国，而且适用于处在资本主义以前的发展阶段的一切国家。\n这为东方社会跨越资本主义社会形态直接进入社会主义社会提供了一个重要理论依据，对东方国家建设社会主义也有重要的指导意义。\ngraph TD A[资本主义社会] --\u003e|\"“世界各国都必然经历资本主义形态”\"|C[过渡时期]--\u003e|\"《资本论》限于欧洲各国\"| B[社会主义社会] A--\u003e|\"“卡夫丁峡谷理论”——《给查苏利奇的回信》\"|B\r毛泽东等共产党人不断总结 发展了这一理论。\n中国的时间线：没有经过充分发展的资本主义，直接进入新民主主义社会\n从整个人类社会看是普遍更替 从个体角度看跨越式发展是特殊性\ngraph LR A[两半社会] --\u003e|两个阶段的民主革命| B[新民主主义社会] B --\u003e |社会主义革命|C[社会主义社会]\r\u0026ndash;“资本主义补课论”和历史虚无主义\u0026ndash; 历史虚无主义的表现和危害\n“灭人之国，先灭其史”\n概念是极具危害性的思潮 本质是怀疑的方法进行形而上学的解读 否定马克思主义的指导地位 否定党的全面领导 否定党执政的合法性 任务 资本主义因素（经济、政治、文化）\u0026ndash;\u0026gt;社会主义因素\n主要矛盾 国外：中国同帝国主义国家的矛盾 国内： 1949-1952 人民大众同国民党反动残余之间的矛盾 1953-1956 无产阶级同资产阶级的矛盾 总路线 “一化三改造”” 1953.12提出\n“要在一个相当长的时期内，逐步实现国家的社会主义工业化，逐步实现国家对农业、对手工业和资本主义工商业的社会主义改造。”\n为什么要工业化？\n自身的发展：国家独立富强 世界的潮流 工业化（发展生产力）和改造（变革生产关系）的关系：建设与改造并举、发展与变革同行\ngraph LR A[总路线] --\u003eB[工业化]--\u003eH(发展生产力) A--\u003eD[三大改造] D --\u003eC[农业]--\u003eG{变革生产关系} D --\u003eE[手工业]--\u003eG D --\u003eF[资本主义工商业]--\u003eG G--\u003eH\r总路线的理论依据 从资本主义社会到社会主义社会，需要经历 一个从无产阶级夺取政权到利用国家政权对 旧的生产关系进行革命性的改造，逐步消灭私有制、确立公有制并大力发展生产力的过渡时期。这是一切走向社会主义国家不可逾越阶段。\n——马克思、恩格斯\n过渡时期的根本任务是把剥削阶级的生产资料转化为公有财产，同时通过合作社的形式使农民走上集体化道路。\n——列宁\n社会主义改造 条件 政治条件 中国共产党的领导和人民民主专政的国家制度的建立\n社会主义革命时期的运动\n1950-1952 土地改革（社会主义革命中心任务） 1950.6.30 毛泽东颁布命令公布施行《中华人民共和国土地改革法》 1950-1953 抗美援朝 1951 镇压反革命 经济条件 新民主主义经济制度的建立和国民经济的恢复\n思想文化条件 马克思列宁主义、毛泽东思想的指导地位\n国际条件 \u0026ndash;中苏关系1950《中苏友好同盟互助条约》\u0026ndash;\n1945《中苏友好同盟条约》南京国民政府\n对苏联友好，控制东北中长铁路、旅顺大连，外蒙古独立\n1949 刘少奇秘密访问，斯大林态度不明朗；毛泽东首次出国访问，重签条约，斯大林不签约\n转折：电报其他国家承认新中国，愿建交\n道路 1952年底，全国土改完成， 3亿多农民分到土地。\n1953年底,过渡时期的总路线，提出对农业进行社会主义改造， 将土地集中起来，引导农民 走合作化道路。\n农业 历程：\n1950土地改革法规定所有权归农民 1952年底土改完成，农民分到土地 1953年底提出对农业进行社会主义改造，集中土地，引导合作化 农业改造的问题：《关于农业合作化问题》\n协作能够形成新的生产力 防止产生新的分化 小农经济限制了生产力，难以满足和适应工业化发展的需要 改造原则：\n自愿互利 典型示范 国家帮助（大规模修水渠什么的） 步骤： 意义：基本成功改造\n农业集体化促进了农业生产的发展 农田水利基本设施的兴建增强了抵御自然灾害的能力 小农经济\u0026ndash;\u0026gt;社会主义集体经济，实现土地公有，避免两极分化，解决了工业化和小农经济的矛盾 巩固工农联盟和社会主义制度 保证了城乡人民对农产品的需求，改善农民生活，为工业化积累了资金，有利于资本主义工商业的改造 手工业 方针： 积极领导，稳步前进\n方法： 从供销入手，实行生产改造\n步骤： 由小到大，由低级到高级\n组织形式： 生产小组—供销合作—生产合作社\n资本主义工商业 官僚资本：直接没收\n民族资本：和平赎买 \u0026ldquo;利用 限制 改造\u0026rdquo;\n有偿收买：“四马分肥”\n国家所得税 企业公积金 职工福利费 资方红利 \u0026ndash;国家资本主义\u0026ndash; 国家资本主义（性质和作用取决于国家的性质）\n资本主义国家： =国家垄断资本主义，是变相的私人资本主义 我国历史： 官僚资本和大地主大资产阶级国家政权结合，封建的买办的垄断的 社会主义改造时期： 在无产阶级国家的管理下，各种形式和国营社会主义经济联系着，受工人监督 现阶段： 和外资的合作仍然也算 具体形式 初级（工厂只有加工） 委托加工 计划订货 统购包销 经销代销 高级 个别企业公私合营 全行业公私合营 资本主义工商业改造阶段\n第一阶段1949-1953年底 初级形式 第二阶段54-55 个别企业在私营企业中加入国家公股 企业生产资料由资本家和国家共有 国家派干部管理 第三阶级55-56 全行业公私合营 资本主义工商业改造的原则\n利用 有利于国计民生的 限制 剥削工人的 改造 资产阶级 资本主义工商业改造的意义\n阶级变化：标志着我国基本上消灭了资本主义剥削制度和资产阶级，为解放和发展生产力开辟广阔前景 矛盾变化：工人阶级和资产阶级的矛盾转化为人民内部的矛盾 证明改造理论政策的正确性 实现了马恩列提出但没有做到的和平赎买 丰富和发展了马列主义关于国家资本主义的学说 是共产主义运动史的创举、毛泽东思想在社会主义革命时期重要发展 历史经验 和平方式改造 积极引导，逐步过渡 社会主义工业化和改造并举（所谓“一化三改造”） 问题 1955夏季过后改造过急，工作粗，改变快，形式过于简单 对部分原工商业者的使用和处理不当 社会主义经济模式过于单一，公有制实现形式过于简单 中共中央对社会主义改造的评价：\n我们党创造性地开辟了一条适合中国特点的社会主义改造的道路。\n——《关于建国以来党的若干历史问题的决议》\n社会主义制度的确立 主要表现 社会主义政治制度 经济结构的改变 阶级关系的变化 主要矛盾的转变 社会主义制度确立的意义 标志着新型生产关系和上层建筑在中国形成，实现了中国历史上最广泛最深刻社会变革，为中国现代化建设创造了制度条件。 使广大劳动人民真正成为国家的主人和社会生产资料的主人。 使占世界人口1/4的东方大国进入了社会主义社会，是世界社会主义运动史上有一个历史性的伟大胜利。 进一步改变了世界政治经济格局，增强了社会主义的力量， 对维护世界和平产生了积极影响。 社会主义建设道路初步探索 《论十大关系》、《关于正确处理人民内部矛盾的问题》\n初步探索的理论成果 调动一切积极因素为社会主义事业服务 如何在中国这样一个经济文化比较落后的东方大国建设和巩固社会主义，是党面临的一个崭新课题\n1956.2.24，苏共二十大赫鲁晓夫全盘否定斯大林\n照搬苏联模式不符合国情，需要积极探索合适的社会主义建设道路\n1956.4-5，毛泽东先后在中央政治局扩大会议和最高国务会议上，作了《论十大关系》的报告，明确提出要以苏为鉴，独立自主地探索适合中国情况的社会主义建设道路。\n\u0026ndash;《论十大关系》\u0026ndash;\n《论十大关系》的主要内容：\n中国工业化道路问题 重工业和轻工业、农业的关系 沿海工业和内地工业的关系 经济建设和国防建设的关系 经济体制改革问题 国家、生产单位和生产者个人的关系 中央和地方的关系 政治生活和思想文化生活问题 汉族和少数民族的关系 党和非党的关系 革命和反革命的关系 中国和外国的关系 是非关系 《论十大关系》确定的方针：调动一切积极因素为社会主义事业服务\n“努力把党内党外、国内国外的一切积极的因素，直接的、间接的积极因素全部调动起来，为社会主义建设服务。”\n——《论十大关系》\n调动一切积极因素，坚持抗美援朝，巩固国内团结，打击美国侵略势力，争取和平建设时期”\n——《论十大关系》\n（统一战线、群众路线） 这对于最大限度地团结全国各族人民，为建设社会主义 现代化国家而奋斗，具有长远的指导意义。\n坚持党的领导 发展展社会主义民主政治 正确认识和处理社会主义社会矛盾的思想 在社会主义社会中，基本的矛盾仍然是生产关系和生产力之间的矛盾，上层建筑和经济基础之间的矛盾。”\n——1957.2《关于正确处理人民内部矛盾的问题》\n1956.9 中共八大标志中国开始探索一条符合国情的建设路线 党的八大指出：我们国内的主要矛盾，已经是人民对于建立先进的工业国的要求同落后的农业国的现实之间的矛盾，已经是人民对于经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾。\n社会主义改造时期工人阶级和资产阶级的矛盾发生了转变 工作重点转到科技革命和社会主义建设上\n\u0026ndash;中国社会各阶段的主要矛盾\u0026ndash;\nhttps://news.cctv.com/2021/08/09/ARTITvQyimHLAovEdLBB0uxo210809.shtml\n社会主义社会矛盾学说\ngraph LR A[两类矛盾] --\u003e|对抗性矛盾| B[敌我矛盾] B--\u003eD(要专政) A --\u003e |非对抗性矛盾 | C[人民内部矛盾] C--\u003e E(要民主)\r中国工业化道路的思想 《论十大关系》中的第一大关系：重工业和轻工业、农业的关系\n《关于正确处理人民内部矛盾的问题》：提出了中国工业化道路的问题\n1962 八届之中全会：以农业为基础、工业为主导，发展国民经济的方针和“两条腿走路”工业化发展思路\n其他理论成果 战略目标：四个现代化 农，工，国防，科技（关键） 科学技术： 1956年党中央提出了“向科学进军”的口号，强调实现四个现代化关键在于科学技术现代化 1960.11.05，中国仿制的第一枚导弹发射成功 1964.10.16，中国成功地试爆了第一颗原子弹 1967.06.17，中国氢弹试验成功 1971.09.10，成功发射第一枚洲际火箭 重视知识分子工作： 1965.1 定论：知识分子是工人阶级的一部分——《论知识分子问题》 国防建设：三线建设 祖国统一：一纲四目 国际战略：和平共处，“三个世界划分” 执政党建设：中国共产党领导、民主集中制、集体领导制 初步探索的意义和经验教训 意义 巩固和发展了我国的社会主义制度 为开创中国特色社会主义理论体系提供经验、理论准备、物质基础 丰富了科学社会主义的的理论与实践 教训 经济建设 政治建设 探索中国特色社会主义建设道路：开始于毛泽东，成功于邓小平\n“文革”结束后，邓小平在领导全党正确评价毛泽东的历史功过、确立毛泽东思想历史地位的同时，继续探索中国实现社会主义现代化的道路，终于找到了一条具有中国特色的社会主义建设道路。\n正如邓小平所说，从许多方面来说，现在我们还是把毛泽东已经提出、但没有做的事情做起来，把他反对错了的改正过来，把他没有做好的事做好。当然，我们也有发展，而且还要继续发展。\n从这个意义上说，探索中国自己的社会主义建设道路的伟大历史任务，是开始于毛泽东，成功于邓小平\n中国特色社会主义理论体系 中国特色社会主义主题词：中国特色社会主义理论体系\n邓小平理论 解放思想、实事求是的思想路线 社会主义初级阶段理论 党的基本路线 社会主义的根本任务 “三步走”战略 改革开放理论 社会主义市场经济理论 “两手抓，两手都要硬”的思想 “一国两制”的构想以及坚持、加强和改善党的领导的思想 “三个代表重要思想” 中国共产党始终代表中国先进生产力的发展要求， 代表中国先进文化的前进方向， 代表中国最广大人民的根本利益。 科学发展观 以人为本，全面、协调、可持续发展 中国特色社会主义理论体系形成发展的社会历史条件 国际背景 历史条件 实践基础 中国特色社会主义理论体系形成发展的过程 中国特色社会主义理论体系的形成——邓小平理论 中国特色社会主义理论体系的跨世纪发展——“三个代表”重要思想 中国特色社会主义理论体系在新世纪新阶段的新发展——科学发展观 中国特色社会主义理论体系在新时代的新篇章——习近平新时代中国特色社会主义思想 邓小平理论：中国特色社会主义理论体系的形成 邓小平是中共第二代领导核心，中国改革开放和现代化建设的总设计师\n形成背景 时代主题：和平（东西）发展（南北） 历史依据：社会主义建设的经验教训 现实依据：改革开放和现代化建设的摸索、实践 主观条件：长期从事革命实践活动的经历和崇高的精神境界 一落 1933.3-6 被“左”派斗争 一起 1935.1 遵义会议后，中央秘书长 二落 1966 “中国第二号走资派” 1968.10 撤职，保留党籍 二起 1973.3 副总理 三落 1976.4 “天安门事件总后台” 三起 1977.7 十届三中全会 六种革命精神 发展过程 早在1920年11月，毛泽东同志就形象地指出：“主义譬如一面旗子，旗子立起了，大家才有所指望，才知所趋赴。”\n从中国共产党成立那天起，我们党就把马克思列宁主义写在自己的旗帜上。\n中国特色社会主义就是毛泽东同志所说的这样一面旗子。\n从1987年党的十三大到2022年党的二十大，八次党的代表大会的主题随着时代发展侧重点有所变化，但在大会主题中“中国特色社会主义”这个主题词是一以贯之的。\ntimeline title 邓小平理论的发展过程 1978.12 : 十一届三中全会 1982.9 : 十二大 1987.10 : 十三大 1992.1~2 : 南方谈话 1992.10 : 十四大 1997.9 : 十五大 1999.3 : 载入宪法\r1978.12 十一届三中全会 重新确立了实事求是的思想路线，彻底否定了 “以阶级斗争为纲”的错误理论和实践，确定把全党工作重点转移到社会主义现代化建设上来，作出实行改革开放的重大决策。\n1982.9 十二大 邓小平在开幕词中明确指出：\n“走自己的道路，建设有中国特色的社会主义，这就是我们总结长期历史经验得出的基本结论。”\n“中国特色社会主义”成为党全部理论和实践创新的主题。这是中国共产党人对科学社会主义发展的开创性贡献。\n1987.10 十三大 理论轮廓形成\n初级阶段理论：一个中心、两个基本点的基本路线\n第一次对中国特色社会主义理论的主要内容作了系统概括\n1992.1~2 南方谈话 三年整顿\n党的基本路线100年动摇不得\n领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强民主文明和谐美丽的社会主义现代化强国而奋斗。\n四项基本原则：\n坚持社会主义道路 坚持人民民主专政 坚持共产党的领导 坚持马列主义、毛泽东思想 社会主义的本质是解放生产力，发展生产力，消灭剥削 ，消除两极分化，最终达到共同富裕\n发展和完善中国特色社会主义社会 重申了深化改革、加速发展的必要性和重要性 从中国实际出发，站在时代的高度，深刻地总结了十多年改革开放经验教训 是邓小平理论的集大成之作，标志着邓小平理论逐步走向成熟 1992.10 十四大 背景：粉碎四人帮之后的思想动乱（资产阶级自由化）\n总结开革开放以来十四年取得的巨大成就 第一次比较系统地初步回答了如何建设社会主义，如何巩固和发展社会主义的一系列基本问题 把对社会主义的认识提高到新的科学水平 是中国特色社会主义理论体系的开篇之作 明确指出邓小平同志是我国社会主义改革开放和现代化建设的总设计师 高度评价了邓小平对开创中国特色社会主义理论的杰出贡献 1997.9 十五大 正式提出“邓小平理论”这一概念 深刻阐述了邓小平理论的历史地位和指导意义 确立邓小平理论为党的指导思想并写入党章。 1999.3 宪法修正案 载入宪法\n邓小平理论的首要的基本的理论问题 社会主义的本质是什么（什么是社会主义，怎么建设社会主义）\n这是邓小平在领导改革开放和现代化建设这一新的革命过程中，不断提出和反复思考的首要的基本的理论问题。\n不同人对社会主义的认识\n马克思对社会主义的概括和描述： 列宁对社会主义的概括和描述： 最主要任务是解放和发展生产力 我党： 1980 第一次提出社会主义本质：解放和发展生产力 1984 第一是发展生产，第二是共同富裕 1992 社会主义的本质：（从生产力、生产关系、社会关系来讲） 解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕 这一科学概括， 既包括了社会主义社会的生产力问题， 又包括了以社会主义生产关系为基础的社会关系问题， 两者相匹配从而达到共同富裕。 社会主义现代化的标准 邓小平理论的精髓 解放思想、实事求是\n“两个凡是”： 凡是毛主席作出的决策，我们都坚决拥护， 凡是毛主席的指示，我们都始终不渝地遵循。\n关于真理标准问题的讨论 胡福明\n解放思想实事求是 什么是社会主义，怎样建设社会主义 邓小平理论的主要内容 graph TD A[邓小平理论] --\u003eB[解放思想，实事求是] B--\u003eC[\"什么是社会主义，怎么建设社会主义\"] C--\u003e 发展道路论 C--\u003e 发展阶段论 C--\u003e 根本任务论 C--\u003e 发展动力论 C--\u003e 外部条件论 C--\u003e 政治保证论 C--\u003e 战略步骤论 C--\u003e 领导依靠论 C--\u003e 祖国统一论\r发展道路论：社会主义初级阶段的基本路线 不坚持社会主义，不改革开放，不发展经济，不改善人民生活， 只能是死路一条。 基本路线要管100年，动摇不得。\n——邓小平\n基本路线（一个中心，两个基本点）： 领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强民主文明和谐美丽的社会主义现代化强国而奋斗。\n四项基本原则：立国之本 坚持社会主义道路 坚持人民民主专政 坚持中国共产党的领导 坚持马克思列宁主义、毛泽东思想 改革开放：发展动力 经济建设：中心 自力更生、艰苦创业：立足点 富强民主文明和谐现代化国家：奋斗目标 发展阶段论：邓小平理论的社会主义初级阶段理论 对社会主义社会发展阶段的探索 列宁：共产主义第一阶段\u0026ndash;\u0026gt;社会主义阶段 我党：社会主义不发达阶段（初级阶段）\u0026ndash;\u0026gt;比较发达阶段\n共产主义社会的基本特征\n物质财富极大丰富，按需分配 社会关系高度和谐，精神境界极大提高 人的全面自由发展 社会主义初级阶段的科学含义 第一，我国社会已经是社会主义社会（社会性质）， 第二，我国的社会主义社会还处在初级阶段（发展程度）。\n初级阶段九大基本特征（十五大） 现代化发展水平 产业结构状况 经济运行方式 文化教育发展水平 人民富裕程度 地区发展状况 体制改革 精神文明建设 国际比较 其他内容：未完待续 社会主义本质的理论 “三个有利于”标准 社会主义可以搞市场经济 革命是解放生产力，改革也是解放生产力 不坚持社会主义，不改革开放，不发展经济，不改善人民生活，就没有出路 改革开放胆子要大一些，敢于试验，看准了的，就大胆地试，大胆地闯 要提倡科学，靠科学才有希望 要坚持两手抓，一手抓改革开放，一手抓打击各种犯罪活动，这两手都要硬 邓小平理论的历史地位 马列主义、毛泽东思想的继续和发展 中国特色社会主义理论体系的开篇之作 改革开放和社会主义现代化建设的科学指南p188 “三个代表”重要思想：中国特色社会主义理论体系的跨世纪发展 “三个代表”重要思想的形成条件 世情（时代背景）：科学判断国际局势和世界格局 世界多极化曲折前行（政治背景） 什么是 极？ 苏联解体 89学潮 党内腐败 资产阶级自由化 冷静观察、沉着应对、韬光养晦、有所作为 两级格局 \u0026ndash;\u0026gt; 一超多强 霸权主义和强权政治 遏制霸权主义 推动公正合理的国际政治新秩序 广大发展中国家抓住机遇发展自己 经济全球化深入发展（经济背景） 生产交换分配消费全球化 双刃剑，机遇与挑战并存 积极参与是实现现代化的必由之路 科技迅猛发展（科技） 信息技术和生命科学为核心的现代科学技术 文化多元发展 国情（实践基础）：改革开放以来建设中国特色社会主义的伟大探索 已实现现代化建设“三步走”战略 前两步目标， 进入全面建设“小康水平”新的发展阶段。\n邓小平“三步走”战略：\n第一步，从1981年到1990年，国民生产总值翻一番，实现温饱；\n第二步，从1991年到20世纪末，再翻一番，达到小康；\n第三步，到21世纪中叶，再翻两番，达到中等发达国家水平。\n存在问题：\n生产力落后 城乡二元结构没有改变 地区差异过大 就业和社保压力增大 实现工业化和现代化 赶上世界先进水平有很长的路要走 外交情况 党情（现实依据）：科学判断党的历史方位和总结经验教训 从领导人民为夺取全国政权而奋斗的党，成为领导人民掌握全国政权并长期执政的党。\n党在各个历史时期的实践正是体现了“三个代表”\n所处环境与自身状况\ngraph LR A[\"“罗马尼亚悖论”\"] --\u003e B[加强自身建设] B--\u003eC[提高领导水平和执政水平] B --\u003eD[提高拒腐防变和抵御风险的能力] C--\u003eE[党应该始终成为坚强的领导核心] D--\u003eE\r“三个代表”重要思想的形成过程 第一阶段： 2000年2月正式提出 第二阶段： 2001年7月全面阐述 第三阶段： 2002年11月确定内容 党的十六大把“三个代表”重要思想同马克思列宁主义、毛泽东思想、邓小平理论一道作为我们党必须长期坚持的指导思想写进了党章（2004年被写进了国家宪法）。\n“三个代表”重要思想的核心观点 中国共产党始终代表中国先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益。\n始终代表中国先进生产力的发展要求 始终代表中国先进生产力的发展要求\n就是党的理论、路线、纲领、方针、政策和各项工作，\n必须努力符合生产力发展的规律，\n体现不断推进社会生产力的解放和发展的要求，\n通过发展生产力不断 提高人民权群众的生活水平。\n围绕着生产力的问题：\n新民主主义革命的中心任务 过渡时期的任务 社会主义的本质 人才强国、 科技兴国、 创新中国\n始终代表中国先进文化的前进方向 始终代表中国先进文化的前进方向\n建设社会主义精神文明，\n不断满足人民群众日益增长的精神文化需求，\n促进全民族思想道德素质和科学文化素质的不断提高，\n为我国经济发展和社会进步提供精神动力和智力支持。\n物质的（生产力问题） \u0026ndash;\u0026gt; 精神的（文化问题）\n始终代表中国最广大人民的根本利益 始终代表中国最广大人民的根本利益\n作为党的全部工作的出发点和落脚点，\n就是不断实现好维护好发展好最广大人民的根本利益，\n充分发挥人民群众的积极性、主动性、创造性，\n在社会不断发展进步的基础上，\n使人民群众不断获得切实的经济、政治、文化利益。\n主要内容 发展是党执政兴国的第一要务 建立社会主义市场经济体制 全面建成小康社会 建设社会主义政治文明 推进党的建设新的伟大工程 联系：\n戈尔巴乔夫改革的民主化改革的性质、\n民主社会主义和科学社会主义的区别\n科学发展观：中国特色社会主义理论体系在新世纪新阶段的新发展 科学发展观的主要内容 坚持以人为本，树立全面、协调、可持续的发展观，促进经济社会和人的全面发展\n发展什么：生产力\n怎么发展：科学性地\n加快转变经济发展方式 发展社会主义民主政治 推进社会主义文化强国建设 构建社会主义和谐社会 推进生态文明建设 全面提高党的建设科学化水平 科学发展观的历史地位 中国特色社会主义理论体系的接续发展 全面建设小康社会、加快推进社会主义现代化的根本指针 为什么 主流发展观的演进 graph LR A[50-60单纯经济增长] --\u003e B[60-70社会综合发展] B--\u003eD[80-90可持续发展] D --\u003eC[90-以人为中心的发展]\r传统发展观的局限 重视物质发展,忽视人自身的全面发展 重视经济发展,忽视社会全面进步 重国内生产总值增长, 忽视人文资源环境指标 基尼系数 拉美化陷阱 拉美国家遵循“先经济增长，后收入分配”的发展思路，其认为：“重要的是发展，社会不公将会在强大的发展动力中逐步消除”。\n拉美成为全球贫富差距最严重的地区，目前平均基尼系数已达0.522。\n发达国家的发展经验 经济发展需要与社会公平正义协同推进\n西欧，包括福利程度最高的北欧国家，在经济起飞之前和经济发展过程中，把实现社会公平确定为发展经济的重要目的，从而建立了比较完善的社会保护体系，这反过来又促进了经济的发展。\n中国的发展情况： 工业化发展迅速 社会主义初探时期 十大关系：优先发展重工业 改革开放后 轻型工业化 第三次工业革命 重工业比重下降 工业化到农村 21世纪 工业信息化 最大的货物出口国家 WTO有利有弊 第四次工业革命 数字经济全面加速：重要支柱型力量 去工业化 发展金融旅游业\n巴西：反面教材\n80-工业比重下降，第三产业发展迅速\n没有健全的工业化支撑，服务和质量得不到保障\n资源空心化，拿资源换外汇\n2008金融海啸\n不能去工业化\n缩小资源浪费，发展高科技产业\n城市化 发达国家一般都是75%以上\n虚假城市化（城市化\u0026gt;区域经济发展）、滞后城市化\n我国是一个发展中的庞大经济体，正处在工业化、城市化的进程当中，规模是迄今城市发展史上罕见的。\n从工业化角度来说，把发达国家用200年甚至更长时间完成的工业化要通过几十年来完成，这种速度也是历史上罕见的。\n从城市化角度来说，我国正经历大规模的农村人口向城市转移，这也是世界史上罕见的。\n农村向城市的社会转型，农业社会向工业社会的转型，必然带来资源消耗大量增加。\n能源紧缺时代 城乡差距地区差距巨大 教育投资、就业压力最大 习近平新时代中国特色社会主义思想：中国特色社会主义理论体系在新时代的新篇章 以习近平同志为核心的党中央\n统筹把握 中华民族伟大复兴战略全局和世界百年未有之大变局，\n坚持把马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合，\n坚持毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观，深刻总结并充分运用党成立以来的历史经验，\n从新的实际出发， 创立了习近平新时代中国特色社会主义思想。\n习近平新时代中国特色社会主义思想的主要内容 党的十九大、十九届六中全会提出的“十个明确”“十四个坚持”“十三个方面成就”概括了习近平新时代中国特色社会主义思想的主要内容。\n“十个明确” “十四个坚持” “十三个方面成就” ","date":"2024-02-13T10:11:26+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240214164854.png","permalink":"https://Multipleriver.github.io/p/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E5%92%8C%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89%E7%90%86%E8%AE%BA%E4%BD%93%E7%B3%BB%E6%A6%82%E8%AE%BA/","title":"毛泽东思想和中国特色社会主义理论体系概论"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 单片机课设任务比较多，我这几天还在医院，说实话本来想抄抄代码自己就debug一下的 没想到还蛮好玩的 借鉴别人代码的时候发现有些朋友写的实在是一言难尽 基本没有模块化，变量命名等格式要求也不是很规范 遂自己写库文件，把几个常用的函数封装了一下 不禁让我想起，之前做数学动画用manim 原作者也是需要经常编程，但不从事软件开发相关工作的人 移植manim个人版项目的时候为了配环境搞的焦头烂额，太不规范了 后来搞出来一些之后就没有再探索了，等开源社区2.0版本出来再搞 代码素养真的很重要，方不方便移植和理解会直接影响一个项目的价值 实验1：简单 IO 实验 任务 控制 8 个 LED 依次点亮，模拟流水灯试验。 利用一个独立式按键控制一个 LED 灯的亮灭，每按 一次键，灯状态改变一次状态，用中断方式实现。 在一位数码管上逐次静态显示数字 0~9 和字母 A~F。 流程图 LED 流水灯 独立按键控制 LED 灯亮灭 数码管显示 程序 LED 流水灯 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \u0026lt;msp430f149.h\u0026gt; #include \u0026#34;config.h\u0026#34; #include \u0026#34;uint.h\u0026#34; void main (void) { WDTCTL=WDTPW+WDTHOLD; //关闭看门狗 BoardConfig(); //端口初始化 Clock_Init(); //时钟初始化 while(1) { uint8 led_code=BIT0; // 0000 0001 uint8 i; for(i=0;i\u0026lt;8;i++) { P2DIR=0xFF; //P2流水灯端输出，低电平点亮 P2OUT=~led_code; //P2不断翻转，控制亮灭 delay_ms(1000); //1s延时 led_code\u0026lt;\u0026lt;=1; //持续左移一位 } } } 独立按键控制 LED 灯亮灭 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \u0026lt;msp430f149.h\u0026gt; #include \u0026#34;config.h\u0026#34; void main(void) { WDTCTL=WDTPW+WDTHOLD; //关闭看门狗 BoardConfig(); //端口初始化 Clock_Init(); //时钟初始化 P2DIR|=BIT7; //P2.7输出，控制第8个LED灯 P1IES|=BIT0; //下降沿触发中断 P1IFG\u0026amp;=~BIT0; //清除P1.0口中断标志 P1IE|=BIT0; //P1.0口中断使能，第一个独立按键 _BIS_SR(LPM3_bits+GIE); //进入低功耗模式，全局中断 } #pragma vector=PORT1_VECTOR __interrupt void PORT1(void) { if(P1IFG\u0026amp;BIT0) //判断是否为P1.0产生的中断，如果是就执行以下程序 { P2OUT^=BIT7; //翻转LED灯状态 while(!(P1IN\u0026amp;BIT0)); //等待按键释放 delay_ms(100); //延时，按键去抖 P1IFG=0; //清除中断标志位 } } 数码管显示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \u0026lt;msp430f169.h\u0026gt; #include \u0026#34;config.h\u0026#34; #include \u0026#34;uint.h\u0026#34; #include \u0026#34;digit_disp.h\u0026#34; void main(void) { WDTCTL=WDTPW+WDTHOLD; //关闭看门狗 BoardConfig(); //端口初始化 Clock_Init(); //时钟初始化 while(1) { unsigned int i; for(i=0;i\u0026lt;16;i++) { display1Digit(i, BIT7); //轮次显示 delay_ms(1000); //延时1s } } } 实验结果 实验心得 本次实验主要目的是掌握 IO 端口的使用方法。在实验中我通过控制端口在需要的时候输出高、低电平来完成 LED 灯的亮灭变化，通过给数码管送译码完的数来完成数码管显示。\n在第一个实验中，板子出现了灯没有按预期闪烁的问题，经调试后发现，应在 while 循环中每次左移后调用延时函数，使得 LED 灯的当前状态持续一段时间后再改变状态，才可以达到闪烁的效果。合理调用延时函数也可以消除按键抖动。\n在第二个实验中，我是用了触发中断函数来配合按键按下，这样避免了系统轮询带来的额外功耗。\n在第三个实验中，考虑到数码管显示是十分常用的模块，我将其封装为 display1Digit 和 display2Digits 函数，以便以后调用。在批量调试和调用相同模块的时候，模块化封装是很有必要的。\n实验2：三人投票表决器 任务 三人投票表决器，按下按键进行表决，对应的 LED 灯点亮，数码管显示按下按键的个数。\n流程图 程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include \u0026#34;msp430f149.h\u0026#34; #include \u0026#34;config.h\u0026#34; #include \u0026#34;uint.h\u0026#34; #include \u0026#34;digit_disp.h\u0026#34; unsigned char i0=0; //记录第一个按键是否按过 unsigned char i1=0; //记录第二个按键是否按过 unsigned char i2=0; //记录第三个按键是否按过 void main(void) { WDTCTL = WDTPW + WDTHOLD; BoardConfig(); Clock_Init(); P4DIR|=0xFF; P5DIR|=BIT5; P6DIR|=BIT6; P2DIR|=0xFF; P1DIR\u0026amp;=~(BIT0+BIT1+BIT2); //端口方向 P1IES|=BIT0+BIT1+BIT2; //边沿触发 P1IFG\u0026amp;=~(BIT0+BIT1+BIT2); //清除中断标志 P1IE|=BIT0+BIT1+BIT2; //中断使能 _BIS_SR(LPM3_bits+GIE); //回归低功耗模式，全局中断 while(1); } #pragma vector=PORT1_VECTOR __interrupt void Port_1 (void) { if(1) display1Digit((i0+i1+i2),BIT7); delay_ms(10); if(P1IFG\u0026amp;BIT0) //检查第一个按键 { if(i0==0) { P2OUT^=BIT0; //翻转LED delay_ms(10); while(!(P1IN\u0026amp;BIT0));//检查按键释放 P1IFG\u0026amp;=~BIT0; //清除中断标志 i0=1; display1Digit((i0+i1+i2),BIT7); delay_ms(10); } if(i0==1) { delay_ms(10); while(!(P1IN\u0026amp;BIT0));//检查按键释放 P1IFG\u0026amp;=~BIT0; //清除中断标志 i0=1; display1Digit((i0+i1+i2),BIT7); delay_ms(10); } } if(P1IFG\u0026amp;BIT1) //检查第二个按键 { if(i1==0) { P2OUT^=BIT1; delay_ms(10); while(!(P1IN\u0026amp;BIT1)); P1IFG\u0026amp;=~BIT1; i1=1; display1Digit((i0+i1+i2),BIT7); delay_ms(10); } if(i1==1) { delay_ms(10); while(!(P1IN\u0026amp;BIT1)); P1IFG\u0026amp;=~BIT1; i1=1; display1Digit((i0+i1+i2),BIT7); delay_ms(10); } } if(P1IFG\u0026amp;BIT2) //检查第三个按键 { if(i2==0) { P2OUT^=BIT2; delay_ms(10); while(!(P1IN\u0026amp;BIT2)); P1IFG\u0026amp;=~BIT2; i2=1; display1Digit((i0+i1+i2),BIT7); delay_ms(10); } if(i2==1) { delay_ms(10); while(!(P1IN\u0026amp;BIT2)); P1IFG\u0026amp;=~BIT2; i2=1; display1Digit((i0+i1+i2),BIT7); delay_ms(10); } } } 实验结果 实验心得 在这次的实验中，我在表决器中引入了 i0、i1、i2 三个 flag 来记录按键状态，并在中断子程序中根据他们的值显示不同代码。画流程图（含中断）很有必要。有了流程图才能更方便精准地确定程序走向、初始化变量、构造子程序框架。\n美中不足的是，这次程序在开发板上跑的并不是很理想，在多次频繁按下按键后程序显示不出对应的数值。\n实验3：矩阵键盘显示 任务 初始状态下所有数码管都熄灭，分别按下矩阵键盘的按键 K1~K16，最右的两位数码管显示对应数值 01~16，其余数码管熄灭。\n流程图 程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \u0026lt;msp430f149.h\u0026gt; #include \u0026#34;config.h\u0026#34; #include \u0026#34;uint.h\u0026#34; #include \u0026#34;digit_disp.h\u0026#34; #include \u0026#34;keyboard.h\u0026#34; void timerInit(void); void main(void) { WDTCTL=WDTPW+WDTHOLD; //关闭看门狗 BoardConfig(); //端口初始化 Clock_Init(); //时钟初始化 timerInit(); _EINT(); //打开全局中断 while(1) { keyboardScan(); //低速：键盘扫描获取键值，送入缓冲区 } } void timerInit(void) { TACTL = TASSEL_1 + ID_3 + MC_1; //定时器A的时钟源选择ACLK，增计数模式 CCTL0 = CCIE; //使能CCR0中断 CCR0 = 10; //设定刷新周期2mS } #pragma vector = TIMERA0_VECTOR __interrupt void Timer_A (void) { display2Digits(Dispbuf,BIT7,BIT6); //高速：定时器控制刷新数码管，显示缓冲区数据 } 实验结果 实验心得 我认为这次实验是我完成的最优雅的一次实验，而低速读取键盘和高速刷新数码管是其中最优雅的部分。同时，在做到这个实验时，我开始封装部分经常使用的模块，这使得程序进一步形式精简，结构进一步优化。\n实验4：人行交通灯控制器 任务 利用定时器 A 实现人行交通灯的控制。\n初始状态红灯点亮； 按下按键后，保持红灯点亮的状态下，数码管从 10s 开始倒计时，当倒计时到 0 时，红灯熄灭， 绿灯点亮，行人可以通行； 在绿灯点亮的状态下，进行 15s 倒计时，倒计时到 3s 时，绿灯以 1s 为周期进行闪烁（每半秒改变一次状态），提醒行人绿灯即将结束，倒计时到 0 时，红灯点亮，数码管倒计时结束。 流程图 程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include \u0026lt;msp430f149.h\u0026gt; #include \u0026#34;config.h\u0026#34; #include \u0026#34;uint.h\u0026#34; #include \u0026#34;digit_disp.h\u0026#34; int t=0;//t是程序总的执行时间 void main(void) { WDTCTL = WDTPW+WDTHOLD; //关闭看门狗 BoardConfig(); P4DIR=0xFF; //端口初始化 P5DIR|=BIT5; P6DIR|=BIT6; P2DIR=0xFF; P2OUT\u0026amp;=~BIT0; P2OUT|=BIT3; //P2.0红灯, P2.3绿灯 TA0CCR0=32768/4; //定时0.5s,因为是增减计数 TA0CTL=TASSEL_1+MC_3+TACLR; //ACLK，增减计数模式，清除TAR TA0CCTL0=CCIE; //打开定时器中断使能 while(1) //按一次键执行一次完整的交通灯周期 { if (!(P1IN\u0026amp;BIT0)) //判断P1.0按键是否按下 { t=0; TA0CTL|=TACLR; //清除TAR while(!(P1IN\u0026amp;BIT0)); //按键是否按下 __delay_cycles(100); //延时消除抖动 _BIS_SR(GIE); //开启总中断 while(t\u0026lt;=20) { display2Digits(10-t/2,BIT7,BIT6); } P2OUT|=BIT0; // 红灯灭 P2OUT\u0026amp;=~BIT3; // 绿灯亮 while(t\u0026lt;=50) //最后几秒手动控制亮灭 { if(t==44) { P2OUT|=BIT3; } if(t==45) { P2OUT\u0026amp;=~BIT3; } if(t==46) { P2OUT|=BIT3; } if(t==47) { P2OUT\u0026amp;=~BIT3; } if(t==48) { P2OUT|=BIT3; } if(t==49) { P2OUT\u0026amp;=~BIT3; } display2Digits(25-(t/2),BIT7,BIT6); } P2OUT|=BIT3; //绿灯灭 P2OUT\u0026amp;=~BIT0; //红灯亮 } } } #pragma vector=TIMERA0_VECTOR __interrupt void TIMERA0_ISR(void) { t++; //每个定时周期自加 TA0CTL\u0026amp;=~TAIFG; //清除中断标志位 } 实验结果 实验心得 本次实验难度较高，在拿到题目的时候，我很难一下子就有思路。主程序和中断怎么搭配、程序结构是什么样的、就着哪一条线索写程序，这些都让我感到困扰。但是真正写起来了就慢慢有了头绪，初改几次就能结束。这让我意识到，脑子里多想一想还不如手上多写一写。\n实验5：简易数字电压表 任务 设计简易数字电压表，实现电压检测和显示功能。P6.0 引脚（A0 通道）采集模拟电压，利用 ADC12 模块 实现模数转换，1602 液晶屏显示电压测量结果。要求 ADC 采用内部 2.5V 基准电压，单通道多次转换模式。通过调节电位器，可以更改输入电压，测量结果最大显示值为 2.500V，精确到小数点后第三位。\n流程图 程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include \u0026#34;msp430f149.h\u0026#34; #include \u0026#34;config.h\u0026#34; #include \u0026#34;cry1602.h\u0026#34; #include \u0026#34;cry1602.c\u0026#34; unsigned char Number[]={\u0026#34;0123456789.\u0026#34;}; unsigned char Title[]={\u0026#34;Volt:\u0026#34;}; void Trans_val(unsigned long Hex_Val) { unsigned long Curr_Volt; //十进制电压值 unsigned int i; //电压值数组参数 unsigned char Curr_Volt_Disp[5]; //电压值显示数组 Curr_Volt=Hex_Val*2500/4095; Curr_Volt_Disp[4]=Curr_Volt/1%10; Curr_Volt_Disp[3]=Curr_Volt/10%10; Curr_Volt_Disp[2]=Curr_Volt/100%10; Curr_Volt_Disp[0]=Curr_Volt/1000%10; Curr_Volt_Disp[1]=10; for(i=0;i\u0026lt;=4;i++) Disp1Char((5+i),0,Number[Curr_Volt_Disp[i]]); } void main(void) { WDTCTL = WDTPW + WDTHOLD; Clock_Init(); //时钟初始化 P1DIR=0xFF;P1OUT=0xFF; //端口初始化 P2DIR=0xFF;P2OUT=0xFF; P3DIR=0xFF;P3OUT=0xFF; P4DIR=0xFF;P4OUT=0xFF; P5DIR=0xFF;P5OUT=0xFF; P6DIR=0xFF;P6OUT=0xFF; P6DIR|=BIT2;P6OUT|=BIT2; LcdReset(); //液晶初始化 DispNChar(0,0,5,Title); //显示\u0026#39;Volt:\u0026#39; Disp1Char(10,0,\u0026#39;v\u0026#39;); //显示电压值 P6SEL|=BIT0; //采样通道 ADC12CTL0=ADC12ON+REFON+REF2_5V+SHT0_2+MSC; //打开ADC12_A，打开内部2.5V参考电压，周期16，多路采样转换 ADC12CTL1=ADC12SSEL_0+SHP+CONSEQ_2+CSTARTADD_4; //单通道重复转换，信号来自采样定时器，单通道重复，寄存器4 ADC12MCTL4=SREF_1+INCH_0+EOS; //A4通道输入，VR+=VREF+，VR-=AVSS ADC12IE|=0x0010; //4通道中断使能 _EINT(); ADC12CTL0|=ENC+ADC12SC; //转换使能，转换启动 } #pragma vector=ADC_VECTOR __interrupt void ADCISR(void) { unsigned long result=ADC12MEM4; delay_ms(500); //延时去抖动 Trans_val(result); } 实验结果 实验心得 本次实验也有一定难度，我调试了好长时间却始终不行。在老师的帮助下，我对 ADC12MEM 寄存器输出格式有了进一步理解，并成功将其转化成十进制数值，逐位显示在液晶屏幕上；解决显示数据始终差约 32 倍的玄学问题后，我对中断和 ADC 转换模式的匹配也有了更深刻的理解。\n实验6：UART 串口通信 任务 利用 MSP430 单片机和 PC 机进行 UART 串口通信，要求 430 单片机把从 PC 机接收到的数据再发送 给 PC 机，利用串口调试工具查看结果。\n数据格式为 7 个数据位，1 个奇校验位，2 个停止位；波特率为 1200。\n流程图 程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include \u0026lt;msp430f149.h\u0026gt; #include \u0026#34;config.h\u0026#34; void main(void) { WDTCTL=WDTPW+WDTHOLD; BoardConfig(); Clock_Init(); P3SEL|=BIT4+BIT5; //P3.4和P3.5设为UART模式,选择串口收发功能 P3DIR|=BIT4; //设P3.4输出 P3DIR\u0026amp;=~BIT5; //设3.5输入 U0CTL|=SWRST; //开始设置 U0CTL=PENA+SPB; //设置数据格式 U0BR0=0x1B; U0BR1=0x00; //设置波特率 U0TCTL|=SSEL0; //设置ACLK为时钟源(32768Hz) U0CTL\u0026amp;=~SWRST; //结束设置 ME1|=URXE0+UTXE0; IE1|=URXIE0; _EINT(); //开全局中断 } #pragma vector=UART0RX_VECTOR __interrupt void UART0_RX(void) { while(!(IFG1\u0026amp;UTXIFG0)); //如果已经发送完成 TXBUF0=RXBUF0; //将接受的送入发送端 } 实验结果 实验心得 本次实验难度不高，但是仍有细节需要注意。例如 U0CTL|=SWRST; 和 U0CTL\u0026amp;=~SWRST; 这一对指令不能忘记，在最后测试的时候需要接上额外的 232 串口线而不是用 usb 端口。这些细节都是影响实验结果的关键。\n课程设计总结 首先我十分感谢老师和同学的帮助，是他们的帮助让我巩固了书本知识，锻炼了编程能力，掌握了调试技巧，最终顺利完成所有实验。\n本课程设计的内容的每一部分，我都踏踏实实地完成，因此我也有很多心得感想。\n在 IO 接口实验中，我熟悉了 IAR、MSPFET 的使用，了解了单片机程序设计到实现的基本过程。尽管实验内容本身很简单，但是在接触复杂实验之前通过一次简单的实验来掌握框架是十分重要的。在理论学习的时候我就对中断有很多疑问甚至十分畏惧，因此我通过1.2实验重温了中断原理和触发机制，也巩固了多源中断和标志位清零的相关内容。\n在投票器实验中，我用顺序结构完成了所要求的内容，尽管这个投票器只能运行一轮……显然它不能称得上是一份“优雅”的设计，因为完备性始终是需要考虑的一环，虽然它并不在实验要求之内，但这对于我自己来说是个遗憾。\n矩阵键盘是我做的最兴奋的实验。一开始我使用静态显示和主函数内动态显示，都不能很好地完成两位数的同时显示。同时，身边的同学和我都出现了数码管余晖过于明显的问题。结合我自己对于 LCD 背光显示的一些基本了解，我认为这是数码管刷新率太低导致的。我想到接口里面学到的高速低速分开处理的策略，将这个思路迁移到实验中，把获取键盘这一低速任务放到主函数，把数码管实时刷新这个高速任务放进中断，同时设置一个计时器高频率触发中断，以达到高低速进程分开的目的。\n当老师考核的时候抽到我这个实验，我真是为这个思路而感到兴奋。这让我对计时器中断有了进一步认识：计时器中断可以产生不同形状可频率的波形，也可以利用这些波形来选择性地触发进程，从而达到高低速分开的优化效果。\n也是在矩阵键盘的实验中，我尝试封装了常用的数码管显示函数和它们需要的 array[ ] 译码数组。我认为模块化和可移植性是衡量一份代码是否“优雅”最基础的指标。假如一份代码所有的功能全都写在一个文件中，或是写在一个主函数里面，变量作用域模糊、函数内容耦合严重等问题就会接踵而至。我力求以“说人话”的方式封装了几个函数，也尝试在其他同学的主程序中调用，均能实现功能。\n交通灯的实验我一开始并没有什么思路，正如我在对应实验的心得体会中所言，在拿到题目的时候，我很难一下子就有思路。主程序和中断怎么搭配、程序结构是什么样的、就着哪一条线索写程序，这些都让我感到困扰。但是真正写起来了就慢慢有了头绪，初改几次就能结束。这让我意识到，脑子里多想一想还不如手上多写一写，如果不知道怎么写就先用简单的顺序结构，写一遍出来再慢慢调整，总会有柳暗花明的时候。\nADC电压表实验也同样令我难忘。本来简简单单程序跑出来的结果始终非常小，但是在我发现调整 Curr_Volt=Hex_Val*2500/4095; 的分子可以比例扩大输出值后，我调出了一个让大家啼笑皆非的分子 77558。老师也帮我 debug 好长时间，一开始注意点都在变量类型上，后来才发现是我自己一个累计 32 次后取均值输出一次的去抖动的“微操”和中断触发不匹配，导致结果差了约 32 倍。\n这次实验加深了我对于寄存器输出值的理解。我也认识到，主进程和触发中断的模式应该要匹配，这样才能发挥作用。\n在想不出什么好办法后，也要敢于厚着脸皮试试看，能不能通过“土办法”解决问题。这并不是一件令人羞耻的事情。\n那天晚上我准备去吃饭，在电梯口遇到了刚刚下楼，却想到问题马上又上来的老师。我们不约而同认为是变量类型的问题（尽管并不是），又一起 debug 了好一会儿。\n我十分感动，不仅仅是因为老师把我的实验 bug 放在心上，也是因为我感受到了在硬件爱好者群体中（在学校同学群体中十分少见的）才有的那种不解决完 bug 不罢休的激情。\nUART 实验到十分简单，并没有什么特别的感想。\n我在撰写这份实验报告的时候，想到那令我满意的矩阵键盘，心中不免再次激动。但是几天前，我在网上偶然接触到一些电脑外设的设计，其中行列扫描、并入串出、高低速分离、冲突处理等等，原来都是别人早就玩烂了的成熟功能，而我还在为一个矩阵键盘的“小聪明”而洋洋得意。这是何等的鼠目寸光。\n不过这也正常，有谁不会为自己一个巧妙的设计而兴奋呢？如果我下次想到一种巧妙的设计，不会感到它十分“优雅”，而是感到十分“基操”，那也许就意味着我掌握的技术体系再一次进步了。\n最后，我再次感谢老师同学的帮助。这真是一次难忘的课设！\n附件 uint.h 1 2 3 4 //------------------------------------------------------------------预定义 #define uint8 unsigned char //8位数 #define uint16 unsigned int //16位数 //----------------------------------------------------------------------- digit_disp.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 //------------------------------------------------------------------预定义 #define digitSelectionOn P5OUT|=BIT5 //数码管位选开启 #define digitSelectionOff P5OUT\u0026amp;=~BIT5 //数码管位选关闭 #define segmentSelectionOn P6OUT|=BIT6 //数码管段选开启 #define segmentSelectionOff P6OUT\u0026amp;=~BIT6 //数码管段选关闭 //----------------------------------------------------------------------- //-------------------------------------------------------------全局变量区 //\u0026lt;变 量 类 型\u0026gt; \u0026lt;变 量 名\u0026gt; \u0026lt;含 义\u0026gt; \u0026lt;被使用函数\u0026gt; // uint8 [] array 数码管显示译码表 display1Digit // display2Digits //----------------------------------------------------------------------- //--------------------------------------------------------------总函数声明 void display1Digit(uint8 num, uint8 location); void display2Digits(uint16 num,uint8 location0,uint8 location1); //----------------------------------------------------------------------- /*********************************************** 函数名称：display1Digit、display2Digits 功 能：数码管动态显示（1位和2位） 参 数：num--待显示数字 location、location0、location1--显示位置 可选BIT0~BIT7 对应八只数码管最左边到最右边 返回值 ：无 ***********************************************/ uint8 array[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71}; void display1Digit(uint8 num, uint8 location) { segmentSelectionOff; //关闭段选 P4OUT=~location; //选择位选 digitSelectionOn; //打开位选 digitSelectionOff; //关闭位选 P4OUT=array[num]; //段选输出相应数码 segmentSelectionOn; //打开段选 } void display2Digits(uint16 num,uint8 location0,uint8 location1) { display1Digit(num%10,location0); //个位数 delay_us(1000); display1Digit(num/10,location1); //十位数 delay_us(1000); } keyboard.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 //------------------------------------------------------------------预定义 #define keyin_x (P1IN \u0026amp; 0x0f) //键盘函数行坐标扫描运算 //----------------------------------------------------------------------- //-------------------------------------------------------------全局变量区 //\u0026lt;变 量 类 型\u0026gt; \u0026lt;变 量 名\u0026gt; \u0026lt;含 义\u0026gt; \u0026lt;被使用函数\u0026gt; // uint8 Dispbuf 键盘缓冲区变量 keyboardScan //----------------------------------------------------------------------- //--------------------------------------------------------------总函数声明 void delay(void); uint8 keyboardScan(void); //----------------------------------------------------------------------- /*********************************************** 函数名称：delay（也可用config.h里的delay_us） 功 能：延时消抖 参 数：无 返回值 ：无 ***********************************************/ void delay(void) { uint16 tmp; for(tmp = 12000;tmp \u0026gt; 0;tmp--); } /*********************************************** 函数名称：keyboardScan 功 能：键盘扫描，存入缓冲区 参 数：无 返回值 ：Dispbuf ***********************************************/ uint8 Dispbuf=0; //缓冲区全局变量 uint8 keyboardScan(void) //二级定位，先定列坐标，再行扫描 { uint8 temp; P1DIR=0XF0; //P1.0~P1.3（PA10~PA13）输入（行坐标） P1OUT=0X0F; //P1.4~P1.7（PA14~PA17）输出清零 if(keyin_x != 0x0f) //若有键被按下 { delay(); //延时消抖 if(keyin_x != 0x0f) //再次检测按键状态 { P1OUT = 0XE0; //P1.4置零，固定按键列坐标，即只扫描第一行；此时观察P1.0~P1.3哪一位为0就能确定按键的行坐标 temp = keyin_x; //取低四位 switch(temp) //转换键值 { case 0x0e: Dispbuf = 1; break; case 0x0d: Dispbuf = 2; break; case 0x0b: Dispbuf = 3; break; case 0x07: Dispbuf = 4; break; } P1OUT = 0XD0; //P1.5置零，同理 temp = keyin_x; //取低四位 switch(temp) //转换键值 { case 0x0e: Dispbuf = 5; break; case 0x0d: Dispbuf = 6; break; case 0x0b: Dispbuf = 7; break; case 0x07: Dispbuf = 8; break; } P1OUT = 0XB0; //P1.6置零，同理 temp = keyin_x; //取低四位 switch(temp) //转换键值 { case 0x0e: Dispbuf = 9; break; case 0x0d: Dispbuf = 10; break; case 0x0b: Dispbuf = 11; break; case 0x07: Dispbuf = 12; break; } P1OUT = 0X70; //P1.5置零，同理 temp = keyin_x; //取低四位 switch(temp) //转换键值 { case 0x0e: Dispbuf = 13; break; case 0x0d: Dispbuf = 14; break; case 0x0b: Dispbuf = 15; break; case 0x07: Dispbuf = 16; break; } } } return Dispbuf; } ","date":"2024-01-19T17:17:26+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216220400.png","permalink":"https://Multipleriver.github.io/p/%E5%8D%95%E7%89%87%E6%9C%BA%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/","title":"单片机课程设计"},{"content":" 1 2 3 4 课设老师要求只到仿真那一步就可以了，后面的硬件部署全凭兴趣 学校没有fpga和开发板给本科生用，老师也不太懂开发板部署和vivado的使用 实在是太苦了，我借了一块7010跑，不会的只能自己查 感谢雪总的技术支持 一、实验名称 定时信号指示系统\n二、实验目的 复习和进一步理解课堂所学理论知识 掌握基本组合、时序逻辑电路模块的 VerilogHDL 语言的描述方法 熟悉 Vivado 软件的基本使用 提高电路设计、代码调试和时序仿真的能力 三、实验任务 设计一个定时信号指示系统，该系统有三个设备，每个设备上有红、绿、蓝三个指示灯，用 VerilogHDL 语言设计一个定时控制系统，要求: 按时钟时间，\n00时03分15秒：设备1绿灯亮 设备2红灯亮 设备3红灯亮\n02时09分29秒：设备1蓝灯亮 设备2红灯亮 设备3红灯亮\n04时20分33秒：设备1红灯亮 设备2绿灯亮 设备3红灯亮\n06时19分14秒：设备1红灯亮 设备2蓝灯亮 设备3红灯亮\n08时25分50秒：设备1红灯亮 设备2红灯亮 设备3绿灯亮\n10时13分17秒：设备1红灯亮 设备2红灯亮 设备3蓝灯亮\n00时03分15秒：设备1绿灯亮 设备2红灯亮 设备3红灯亮\n这样依次循环。\nFPGA 外输入时钟为8Hz,在 FPGA 分频为1Hz后，设计数字时钟，然后根据时间向外发不同的控制信号，控制三个设备灯的亮灭如下图所示：\n四、实验过程 （一）总体思路 该实验任务实现思路较为清晰，主要分为分频器、计数器、判断逻辑等模块。\n1、分频器 显而易见，我们需要一个50% 8分频模块。\n2、计数器 在计数器模块中，如何平衡好时分秒的计数输出是关键。级联计数器每个单元模值太小会使引脚过于繁琐不直观，太大则会耗费太多系统资源。\n这里我构造了模12同步计数器和模5同步计数器，分别使用1组模12同步计数器和模5同步计数器完成秒的计数，使用一组模12同步计数器和模5同步计数器完成分的计数，最后使用一个模12同步计数器完成时的计数。\n计数器分别输出 s0, s1, m0, m1, h0 五个 4bit 信号送入判断逻辑。\n3、判断逻辑 该模块接收来自 s0, s1, m0, m1, h0 等5个 4bit 信号，并在对应时刻输出对应的 R1, G1, B1, R2, G2, B2, R3, G3, B3 等9个RGB信号。设定 RGB 信号低电平点亮对应颜色 LED。\n（二）代码实现 1、分频器（已修改） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 module clk_div8( input clk, input rst_n, output reg clk_div ); parameter NUM_DIV = 8; reg [3:0] cnt; always @(posedge clk or negedge rst_n) if(!rst_n) begin cnt \u0026lt;= 1\u0026#39;d0; clk_div \u0026lt;= 1\u0026#39;b0; end else if(cnt \u0026lt; NUM_DIV / 2 - 1) begin cnt \u0026lt;= cnt + 1\u0026#39;b1; clk_div \u0026lt;= clk_div; end else begin cnt \u0026lt;= 1\u0026#39;d0; clk_div \u0026lt;= ~clk_div; end endmodule 2、计数器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 //模5计数器模块 module cnt5(clk, rst_n, en, dout, co, set, set_flag); input clk, rst_n, en; input set_flag; input [3:0]set; output [3:0] dout; reg [3:0] dout; output co; always@(posedge clk or negedge rst_n) begin if(!rst_n) if(set_flag) dout \u0026lt;= set[3:0]; else dout \u0026lt;= dout; //系统置位 else if(en) if(dout == 4\u0026#39;b0100) //计数值达到5时，计数器清零 dout \u0026lt;= 4\u0026#39;b0000; else dout \u0026lt;= dout + 1\u0026#39;b1; //否则，计数器加1 else dout \u0026lt;= dout; end assign co = dout[0]; //当计数达到4(4\u0026#39;b0100)时，进位为1，计数值为其他，都没有进位 endmodule 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 //模12计数器模块 module cnt12(clk, rst_n, en, dout, co, set, set_flag); input clk, rst_n, en; input set_flag; input [3:0]set; output [3:0] dout; reg [3:0] dout; output co; always@(posedge clk or negedge rst_n) begin if(!rst_n) if(set_flag) dout \u0026lt;= set[3:0]; else dout \u0026lt;= dout; //系统置位 else if(en) if(dout == 4\u0026#39;b1011) //计数值达到9时，计数器清零 dout \u0026lt;= 4\u0026#39;b0000; else dout \u0026lt;= dout + 1\u0026#39;b1; //否则，计数器加1 else dout \u0026lt;= dout; end assign co = dout[0]\u0026amp;dout[1]\u0026amp;dout[3]; //当计数达到11(4\u0026#39;b1011)时，进位为1，计数值为其他，都没有进位 endmodule 3、判断逻辑 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 //共阳极接发，低电平点亮LED module fsm(s0, s1, m0, m1, h0, r1, g1, b1, r2, g2, b2, r3, g3, b3); input s0, s1, m0, m1, h0; output reg r1, g1, b1, r2, g2, b2, r3, g3, b3; always@(s0, s1, m0, m1, h0) begin if ((s0==3)\u0026amp;(s1==1)\u0026amp;(m0==3)\u0026amp;(m1==0)\u0026amp;(h0==0)) r1=1\u0026#39;b1; g1=1\u0026#39;b0; b1=1\u0026#39;b1; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; else if ((s0==5)\u0026amp;(s1==2)\u0026amp;(m0==9)\u0026amp;(m1==0)\u0026amp;(h0==2)) r1=1\u0026#39;b1; g1=1\u0026#39;b1; b1=1\u0026#39;b0; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; else if ((s0==9)\u0026amp;(s1==2)\u0026amp;(m0==8)\u0026amp;(m1==4)\u0026amp;(h0==1)) r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b1; g2=1\u0026#39;b0; b2=1\u0026#39;b1; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; else if ((s0==2)\u0026amp;(s1==1)\u0026amp;(m0==7)\u0026amp;(m1==1)\u0026amp;(h0==6)) r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b1; g2=1\u0026#39;b1; b2=1\u0026#39;b0; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; else if ((s0==2)\u0026amp;(s1==4)\u0026amp;(m0==1)\u0026amp;(m1==2)\u0026amp;(h0==8)) r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b1; g3=1\u0026#39;b0; b3=1\u0026#39;b1; else if ((s0==5)\u0026amp;(s1==1)\u0026amp;(m0==1)\u0026amp;(m1==1)\u0026amp;(h0==10)) r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b1; g3=1\u0026#39;b1; b3=1\u0026#39;b0; else r1=1\u0026#39;b0; g1=1\u0026#39;b0; b1=1\u0026#39;b0; r2=1\u0026#39;b0; g2=1\u0026#39;b0; b2=1\u0026#39;b0; r3=1\u0026#39;b0; g3=1\u0026#39;b0; b3=1\u0026#39;b0; end endmodule 4、顶层设计 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 module top ( CLK, RST, EN, SET, SET_FLAG, R1, G1, B1, R2, G2, B2, R3, G3, B3 ); input CLK; input RST, EN, SET_FLAG; input [3:0] SET; output wire R1, G1, B1, R2, G2, B2, R3, G3, B3; wire line_clk_div; wire line_s0_s1; wire [3:0] line_s0; wire line_s1_m0; wire [3:0] line_s1; wire line_m0_m1; wire [3:0] line_m0; wire line_m1_h0; wire [3:0] line_m1; wire [3:0] line_h0; clk_div8 DIVIDER( .clk(CLK), .rst_n(RST), .clk_div(line_clk_div) ); cnt12 COUNTER_S0( .clk(line_clk_div), .rst_n(RST), .en(EN), .set(SET), .set_flag(SET_FLAG), .dout(line_s0), .co(line_s0_s1) ); cnt5 COUNTER_S1( .clk(line_s0_s1), .rst_n(RST), .en(EN), .set(SET), .set_flag(SET_FLAG), .dout(line_s1), .co(line_s1_m0) ); cnt12 COUNTER_M0( .clk(line_s1_m0), .rst_n(RST), .en(EN), .set(SET), .set_flag(SET_FLAG), .dout(line_m0), .co(line_m0_m1) ); cnt5 COUNTER_M1( .clk(line_m0_m1), .rst_n(RST), .en(EN), .set(SET), .set_flag(SET_FLAG), .dout(line_m1), .co(line_m1_h0) ); cnt12 COUNTER_H0( .clk(line_m1_h0), .rst_n(RST), .en(EN), .set(SET), .set_flag(SET_FLAG), .dout(line_h0) ); fsm FSM( .s0(line_s0), .s1(line_s1), .m0(line_m0), .m1(line_m1), .h0(line_h0), .r1(R1), .g1(G1), .b1(B1), .r2(R2), .g2(G2), .b2(B2), .r3(R3), .g3(G3), .b3(B3) ); endmodule （三）纯代码仿真及优化 缩短仿真时间长度，提前判断逻辑对应的时间点，进行初步仿真。\ntestbench（已修改）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 `timescale 1us / 1us module test_top; //-------------------------------------------------------------------------- //-- Ports //-------------------------------------------------------------------------- //Inputs reg CLK; reg RST, EN, SET_FLAG; reg [3:0] SET; //Outputs wire R1, G1, B1, R2, G2, B2, R3, G3, B3; //-------------------------------------------------------------------------- //-- Instantiation //-------------------------------------------------------------------------- top uut( .CLK(CLK), .RST(RST), .EN(EN), .SET(SET), .SET_FLAG(SET_FLAG), .R1(R1), .G1(G1), .B1(B1), .R2(R2), .G2(G2), .B2(B2), .R3(R3), .G3(G3), .B3(B3) ); //-------------------------------------------------------------------------- //-- CLK //-------------------------------------------------------------------------- initial begin CLK=0; forever #62500 CLK=~CLK; end //-------------------------------------------------------------------------- //-- RST, EN, SET, SET_FLAG //-------------------------------------------------------------------------- initial begin RST=1; EN=0; # 10000; EN=1; SET=4\u0026#39;b0000; SET_FLAG=0; end endmodule 在仿真过程中，大部分功能基本能实现，但也存在一些问题：\n1、timescale问题 在 testbench 若使用\n1 `timescale 1s / 1us 搭配时钟翻转\n1 forever #0.0625 CLK=~CLK; 会出现无报错，但是 clk 跑不起来的情况\n网上查找诸多资料无解后，将时钟翻转改为\n1 forever #1 CLK=~CLK; 发现默认时间单位是ps，也就是说0.0625 * 1s没有生效\n使用\n1 `timescale 1us / 1us 搭配时钟翻转\n1 forever #62500 CLK=~CLK; 则可以正常运行clk\n怀疑并不是代码不规范，而是 Vivado 自身bug。\n原先那句timescale在 2023.1 版本无法运行，更新到 2023.2 就可以了。\n2、进位对齐问题 因在光标处进位出现提前，故改为采用下降沿触发进位\n现在clk是低电平先行，故所有时钟、进位都应改为下降沿标准\n3、类似越沿采样的问题 进位对齐的问题解决了，开头还是有提前采样（反越沿采样？）： 此时不能再改下降沿逻辑了，只能用延时控制使能信号，使程序不要一开始就进入工作状态，即EN端不要直接置1。\n延缓使能后，该问题得到解决：\n（四）纯代码仿真最终测试 仿真时间长度恢复到12小时、模拟实际判定条件，观察仿真结果。\n需要注意的是，使能端因延缓启动会有10ms的手动延时\n抽取 36797s 看一下对应是否是 10:13:17\n确实是对应（但由于延时使能，该仿真时间线会有10ms滞后，可计算进去）\n（五）纯代码仿真结果集中展示 1、Simulation 2、Schematic 3、I/O Planning 4、Flooorplanning （六）开发板配置 目前我已在本次课设基础上，完成了开发板时钟分频降频、I/O管脚约束等后续工作，对所设计的模块进行了 IP 核封装，并基于全 IP 的架构完成了电路综合和实现。\n后续我将继续在 zynq7010 上实现相关功能。\nok考试考完了，课设的内容也只是要求到仿真。\n如果要迁移到板子上，我需要解决以下2个问题：\n板载时钟降频（50MHz \u0026ndash;\u0026gt; 8Hz） 合理管脚约束（常数引脚不悬空） （七）板载时钟降频 50MHz \u0026ndash;\u0026gt; 8Hz 这个分频率实在是有点大，肯定是采用多级分频。需要注意：\n高频区段的时钟精度要保证 考虑到资源问题，每一级分频数不能太大 为设计简单，可以复用模块 下面的设计步骤就是基于 IP 核的组合了。使用 IP 核的首要原因是我当时并没有想到什么在板上锁定常数引脚的方法，但是 IP 核中有一个常数 IP，可以接上引脚，于是便想用那个试一试。\n因此在考虑时钟问题的时候我也准备使用基于 IP 核组合的设计流程。\n综上所述，我选择了 Clocking Wizard 做一级分频以保证精度。 Clocking Wizard 的输出范围约为 5MHz ~ 800Mhz，所以能降则降，一级分频结果为 5MHz。 次级分频使用的是1个10分频和2个250分频。我也将之前纯代码仿真的那部分整体封装成 IP，最后一起连接。\n1、50% 250分频模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 `timescale 1us / 1us ////////////////////////////////////////////////////////////////////////////////// module freq_divider_250(clk, rst_n, clk_div); input clk; input rst_n; output reg clk_div=1\u0026#39;b1; parameter NUM_DIV = 250; reg [7:0] cnt; always @(negedge clk or negedge rst_n) if(!rst_n) begin cnt \u0026lt;= 1\u0026#39;d0; clk_div \u0026lt;= 1\u0026#39;b0; end else if(cnt \u0026lt; NUM_DIV / 2 - 1) begin cnt \u0026lt;= cnt + 1\u0026#39;b1; clk_div \u0026lt;= clk_div; end else begin cnt \u0026lt;= 1\u0026#39;d0; clk_div \u0026lt;= ~clk_div; end endmodule testbench\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 `timescale 1us / 1us ////////////////////////////////////////////////////////////////////////////////// module test_freq_divider_250( ); //-------------------------------------------------------------------------- //-- Ports //-------------------------------------------------------------------------- //Inputs reg clk; reg rst_n; //Outputs wire clk_div; //-------------------------------------------------------------------------- //-- Instantiation //-------------------------------------------------------------------------- freq_divider_250 test_freq_divider_250( .clk(clk), .rst_n(rst_n), .clk_div(clk_div) ); //-------------------------------------------------------------------------- //-- CLK //-------------------------------------------------------------------------- initial begin clk=0; forever #250 clk=~clk; end //-------------------------------------------------------------------------- //-- RST, EN, SET, SET_FLAG //-------------------------------------------------------------------------- initial begin rst_n=1; end endmodule 仿真\n封装\n2、50% 10分频模块 照葫芦画瓢，仿真\n封装\n最终2个分频模块都能在 IP Catalog 中查询到\n（八）Constant IP 核约束常数管脚 直接在 IP Catalog 中调用已经封装好的 Constant IP 核。\nClocking Wizard 也是一样调用\n（九）接线图 （十）输出端口管脚约束 CLK 输入接 H16，所有 I/O 端口采用 LVCMOS33 电平标准。\n（十一）Generate Block Design Diagram 到代码 block design contains locked ips\n更新IP核状态\nCreate HDL Wrapper\n最终的 Sources 目录为：\n（十二）第二阶段仿真 testbench\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 `timescale 1ps / 1ps ////////////////////////////////////////////////////////////////////////////////// module test_design_1( ); //-------------------------------------------------------------------------- //-- Ports //-------------------------------------------------------------------------- //Inputs reg clk_in_50M; //-------------------------------------------------------------------------- //-- Instantiation //-------------------------------------------------------------------------- design_1 test_design_1( .clk_in_50M(clk_in_50M)); //-------------------------------------------------------------------------- //-- clk_in_50M //-------------------------------------------------------------------------- initial begin clk_in_50M=0; forever #10000 clk_in_50M=~clk_in_50M; end endmodule 波形\n但是似乎仿真不了太长时间，毕竟 50MHz 的时钟和 1ps 的精度让我本就不富裕的 CPU 计算能力更显捉襟见肘\n于是乎，我把那几个判断时间改短一点，象征性地在板子上验证一下。\n核心代码修改：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 begin//--------------------------------------if_else判断的条件改简单了，每1秒变一下信号 if ((s0==1)\u0026amp;(s1==0)\u0026amp;(m0==0)\u0026amp;(m1==0)\u0026amp;(h0==0)) begin r1=1\u0026#39;b1; g1=1\u0026#39;b0; b1=1\u0026#39;b1; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; end else if ((s0==2)\u0026amp;(s1==0)\u0026amp;(m0==0)\u0026amp;(m1==0)\u0026amp;(h0==0)) begin r1=1\u0026#39;b1; g1=1\u0026#39;b1; b1=1\u0026#39;b0; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; end else if ((s0==3)\u0026amp;(s1==0)\u0026amp;(m0==0)\u0026amp;(m1==0)\u0026amp;(h0==0)) begin r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b1; g2=1\u0026#39;b0; b2=1\u0026#39;b1; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; end else if ((s0==4)\u0026amp;(s1==0)\u0026amp;(m0==0)\u0026amp;(m1==0)\u0026amp;(h0==0)) begin r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b1; g2=1\u0026#39;b1; b2=1\u0026#39;b0; r3=1\u0026#39;b0; g3=1\u0026#39;b1; b3=1\u0026#39;b1; end else if ((s0==5)\u0026amp;(s1==0)\u0026amp;(m0==0)\u0026amp;(m1==0)\u0026amp;(h0==0)) begin r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b1; g3=1\u0026#39;b0; b3=1\u0026#39;b1; end else if ((s0==6)\u0026amp;(s1==0)\u0026amp;(m0==0)\u0026amp;(m1==0)\u0026amp;(h0==10)) begin r1=1\u0026#39;b0; g1=1\u0026#39;b1; b1=1\u0026#39;b1; r2=1\u0026#39;b0; g2=1\u0026#39;b1; b2=1\u0026#39;b1; r3=1\u0026#39;b1; g3=1\u0026#39;b1; b3=1\u0026#39;b0; end else begin r1=1\u0026#39;b0; g1=1\u0026#39;b0; b1=1\u0026#39;b0; r2=1\u0026#39;b0; g2=1\u0026#39;b0; b2=1\u0026#39;b0; r3=1\u0026#39;b0; g3=1\u0026#39;b0; b3=1\u0026#39;b0; end end //------------------------------------------------------------------------------ 仿真波形（象征性的搞了几秒）\n封装好，替换原来的main0\n连上新的IP核\n引出输出端口\n重新generate一下，重新create wrapper\n可以看到.v文件更新了\n简单仿真2s康康 emm失败了\n实现\nI/O Planning\nFloorplanning\n生成比特流\n报错：\n1 [DRC UCIO-1] Unconstrained Logical Port: 1 out of 10 logical ports have no user assigned specific location constraint (LOC). This may cause I/O contention or incompatibility with the board power or connectivity affecting performance, signal integrity or in extreme cases cause damage to the device or the components to which it is connected. 管脚约束不恰当，修改之\nAuto Connect 之后 Pragram 一下，完美点亮\n但是最后一个状态好像没出来，不知道为什么呜呜呜\u0026hellip;\u0026hellip;\n未完待续\u0026hellip;\u0026hellip;\n六、实验感想 本次实践感想主要分为以下几个方面：\n首先我十分感谢老师的教学和指导，这让我掌握了 FPGA 基本的基本理论知识和 VerilogHDL 的基本编程、调试方法。在本次实践过程中我遇到了一些问题，没有老师的指导，这些问题就不会被顺利解决。\n其次，这此实践锻炼了我创建并实施项目的能力。我克服畏惧，独立完成了从总体设计、模块设计到 debug、仿真、综合等全部环节。面对一个个 error，我没有灰心丧气，而是一个一个排查错误，积极上网查找资料、找大佬沟通交流。这些对于一年前怕写代码、怕 debug、怕跟人沟通的我来说是一种进步。\n最后，我深刻地认识到，在课程体系落后于其他以电子信息为专长的学校的情况下，只有自力更生，学会理解迁移经典代码，学会合理运用网络，学会与更强的人沟通，才能在短时间内上手一份自己并不熟悉的工程。\n","date":"2024-01-10T15:32:06+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216232456.png","permalink":"https://Multipleriver.github.io/p/eda-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%89%8B%E6%90%93%E4%B8%80%E4%B8%AA%E8%AE%A1%E6%97%B6%E5%99%A8/","title":"EDA 课程设计——手搓一个计时器"},{"content":" 1 2 3 微机原理课后写着玩玩系列 封面放一只 Celeron300A 镇楼 经老师推荐，重新阅读《乔布斯传》和《硅谷之火》 20世纪40年代-50年代：电子计算机技术的起源 电子计算机概念的形成 20世纪40年代，在第二次世界大战的背景下，为了满足军事计算的需求，电子计算机的概念开始形成。当时人们设计了一些模拟计算设备来计算炮弹的弹道表，这就是是电子计算机雏形。\n著名的Z3计算机就是在这个时期诞生的。它是由德国工程师Konrad Zuse在1941年设计，利用电磁元件实现二进制计算的机器。这标志着电子计算机时代的开始。\nENIAC及早期计算机的使用 1946年2月，世界上第一台通用电子计算机ENIAC (Electronic Numerical Integrator and Computer)在美国宾夕法尼亚大学摩尔学院问世。这台计算机由John Mauchly和J. Presper Eckert领导设计，采含有18000个真空管，可编程，能在200微秒的时间内完成一次乘法运算。它的出现标志着着电子计算机技术从理论研究走向实践和商业应用。\n在此后的数年里，先进的计算机技术首先主要应用于科研领域，帮助科学家求解复杂科学问题。这一时期诞生的计算机包括EDVAC、BINAC、UNIVAC等。它们的运算速度不断提高，内存容量不断增大，为更广泛的应用奠定了基础。\n真空管技术的应用 这一时期设计的计算机大量采用了真空管技术。真空管具有功耗大、散热量大、寿命短等缺点，但由于体积小、可实现计算机内各模块间的逻辑控制，成为这时期计算机的核心部件。\n真空管的使用代表着利用电子技术来代替机械开关进行数据处理和运算的全新模式，推动了计算机发展速度。随着晶体管的出现和集成电路技术的发展，真空管技术逐渐被淘汰。\n20世纪50年代-60年代：晶体管时代 这一时期，晶体管逐渐取代了真空管，微程序设计应运而生，集成电路也取得了重大发展。\n晶体管取代真空管 20世纪50年代起，晶体管开始大规模取代真空管。相比体积庞大的真空管，晶体管小巧轻便，工作电压低，寿命长，抗震动能力强，不易损坏。这大大促进了计算机和计算机处理器的小型化进程。\n1953年，IBM发布世界上第一台全晶体管商业计算机IBM 608，此后又推出了晶体管化的中型机IBM 7090和IBM 7094。晶体管计算机逐渐成为主流，真空管计算机退出历史舞台。\n微程序设计的出现 20世纪50年代末，英国计算机专家Wilkinson提出“微程序”的概念。微程序将计算机指令集解耦为二层架构:体系结构层和微程序层。程序员使用高层指令，这些指令会调用预先设计好的微子程序来完成工作。\n微程序为指令执行提供了更大灵活性，因为对指令集的修改只涉及到微程序调整而无需改动计算机硬件。这大大降低了计算机升级改造的难度。微程序设计开创了固件这个全新领域，并在60年代成为主流计算机体系结构的标准配置。\n集成电路的发展 1958年，TI的Jack Kilby发明了第一个集成电路。他在一块硅片上集成了多个晶体管，使其在体积不变的情况下拥有更多的功能。这一发明奠定了集成电路技术的基础。\n60年代是集成电路飞速发展的十年。每个芯片中的晶体管数量呈指数增长，性能提升也越来越迅猛。\n1965年时摩尔提出著名的“摩尔定律”，指出集成电路中的晶体管数量约每隔2年就会增长一倍。这成为集成电路产业发展的重要定律（诅咒qwq）。\n到1968年，美国英特尔公司由罗伯特·诺伊斯和高登·摩尔创立。他们是商业微处理器和随机存取存储器(RAM)技术的先驱者。英特尔的产品极大地加速并扩大了集成电路的实际应用，打开了信息时代的大门。\n20世纪70年代:（现代意义的）处理器的诞生 1971年:第一款微处理器Intel 4004的发布 1971年11月15日是信息技术发展史上一个重要的时间点，因为美国著名半导体公司Intel宣发了世界上第一款4位微处理器Intel 4004。这款仅有12.75平方毫米的微型集成电路集成了高达2300个晶体管，具有每秒约92，000次的运算速度!\nIntel 4004微处理器的发布引起了业内的轰动，因为在此之前计算机系统的核心运算功能离不开大量运算器件的有线连接。线连接结构使计算机体积庞大、运算速度缓慢；而Intel 4004实现了在单个芯片上制造完整的中央处理器(CPU)，开创了微处理器这个全新的概念。\n微处理器功能和影响 微处理器深刻改变了计算机系统的设计。微处理器具有体积小、重量轻、耗电量低以及计算速度快等突出优点。主要功能和影响体现在:\n实现小型化 微处理器取代了原来笨重的分立电路，使得计算机的核心部件能以轻巧和省电的形式存在。计算机因此能做得非常小，并能够放置在普通办公桌上，这让个人计算机(PC)成为现实。\n实现高性能 在同样体积空间内，微处理器集成度更高，运算速度更快，从而能在有限空间内提供强大的计算能力。这为软件功能的扩展升级提供了硬件基础，推动了当代信息技术革命。\n早期微处理器的竞争 Intel 4004并非当时唯一的微处理器。TI公司也在同一时期发布了4位TMS 1000系列微处理器。这两大公司在微处理器领域展开激烈竞争。\n在此后的16位和32位微处理器时代，Intel发展出x86系列，成为个人计算机CPU的最大厂商。而AMD则从仿效对手，转向挑战对手，最终也成长为和Intel一决高下的另一计算机处理器巨头。2022年开始，这对竞争多年的老对手，决定联合起来开发崭新的芯片架构。(不过AMD的U用Windows就是感觉不爽)\n20世纪70年代-80年代:微处理器革命 20世纪70年代初，以Intel产品为代表的微处理器得到快速发展，极大地推动了信息技术革命。几款划时代的微处理器问世，奠定了x86架构的基础，使微处理器从简单的控制芯片演变为可以支持软件应用的通用计算芯片。\nIntel 8080和8086 1971年，Intel推出了第一款4位微处理器Intel 4004。之后在1974年，Intel研发了8位微处理器Intel 8080。该处理器采用了高速的N沟道MOS工艺制造，时钟频率达2MHz，是当时最快的微处理器，性能相比之前的4004和8008有了质的飞跃。它拥有16KB的寻址空间，使得程序和数据可以被很好地区分开来，成为当时功能强大的通用微处理器。在1978年，Zilog公司推出了完全兼容Intel 8080指令集的Z80处理器，形成了广泛的应用生态。这两款微处理器的成功，开启了微处理器在嵌入式系统中的大规模应用。\n1980年，Intel发布了另一款划时代产品Intel 8086微处理器。这是Intel的第一款16位微处理器，它提供了更大的寄存器位宽，直接寻址空间达到1MB。Intel 8086的浮点运算速度是当时其他微处理器的10倍，完全超越了竞争对手。该处理器具备了支持高级软件和操作系统的全新计算架构，为后来的x86体系奠定了基础。（但是现在已经买不到了，好想收藏一只\u0026hellip;\u0026hellip;）\n在设计上，Intel 8086采用了EU和BIU的体系结构，及时隔离执行核心和外部总线；段址+偏移地址的寻址机制也成为此后x86架构的重要特性。\nMotorola和Zilog的竞争对手 在微处理器快速发展的70年代，Intel并非唯一的参与者。Motorola、Zilog等公司都推出了有影响力的微处理器产品，形成了激烈的技术竞争。\nMotorola是Intel早期的主要竞争对手。1974年，Motorola发布了8位微处理器MC6800。这款产品在当时也属于高性能设计，最大时钟频率达到1MHz。它提供了更多的寄存器，在某些应用场景下性能超过了Intel的产品。基于MC6800，Motorola后续推出了大量周边芯片，构成完整的微计算机系统，在工业控制和嵌入式领域得到广泛应用。至80年代，该680x系列产品生态已相当成完整。\nZilog公司是第一款微处理器4004的设计师Federico Faggin创建的公司。在1976年，Zilog推出了Z80微处理器，这款处理器直接兼容Intel 8080的指令系统，因而能运行丰富的软件资源。它的制造工艺更先进，性能超过了8080。\n80x86架构的确立 在Intel 8086问世后，Intel公司开始重点推动x86架构的演进。凭借良好的软件兼容性和不断加大的性能提升，x86架构的8080和8086产品在全球获得了大量的用户群。在IBM公司选用Intel 8088为其IBM PC的CPU后，x86架构获得了进一步推广。这是x86成为个人计算机的主流架构和产业标准的重要一步。\n进入80年代中后期，Intel公司开始发布大名鼎鼎的80x86系列32位微处理器，如80286、80386和80486。其中80386成为当时世界上最强大的微处理器。这些产品不仅性能大幅提升，而且向下兼容旧软件。x86架构的软件和生态积累为这些新品带来了绝大的优势，它们很快在个人计算机市场占据主导，多年来80x86系列在桌面平台上的地位无可撼动，其架构原理和设计理念也对后世影响深远。\n80年代-90年代:计算架构的多样化 精简指令集计算(RISC)的兴起 20世纪80年代，为追求更高的处理性能，精简指令集计算(RISC)架构应运而生。RISC通过简化指令集，减少冗余复杂指令，从而大大提高单条指令的运行效率。\n1981年，IBM的John Cocke明确提出并证明了RISC设计理念的优越性，开启了这一架构设计新的方向。1985年，首款商用RISC处理器MIPS R2000面市，采用流水线设计，单周期内可发出一条指令，指令吞吐率大幅提升。与CISC相比，MIPS综合性能提高3-5倍，功耗下降90%，获得巨大成功，开启了RISC商用化的先河。\nMIPS和SPARC等RISC架构的影响 在众多RISC设计中，MIPS和SPARC是商业上最成功的两个案例。MIPS专注追求最优性能，在工作站和嵌入式系统市场成功占据一席之地;SPARC标准化程度高，可移植性好，被广泛使用在服务器领域。这两款RISC CPU的单线程性能突出，很快在高速计算市场取得主导地位。\nx86架构在个人计算机中的主导地位 在个人计算机上，Intel的x86 CISC系列不断推出新品配合指令流水线、缓存等技术创新，在性能和软件兼容性上长期保持领先。1990年面市的Pentium处理器性能大幅提升，奠定了x86体系在个人计算机市场的霸主地位。在Windows系统全面推广的助力下，x86成为这个时期PC领域的基准。\n90年代-2000年代:性能时代 时钟速度和性能的不断提高 20世纪90年代，CPU的时钟频率开始了大幅度的提高。英特尔的奔腾处理器的主频从1993年的60MHz提高到2000年的1.5GHz，增长了25倍，性能也相应大大提高。制造工艺的进步是主要原因，制程的提升允许更高集成度的芯片设计和更低的工作电压；而时钟频率的提高直接带来单线程执行性能的增强。这一时期个人计算机的运算速度开始大幅提升。\n2000年代初:多核心处理器的引入 进入21世纪后，因为继续提高时钟频率面临工艺和散热的双重瓶颈，所以CPU开始向多核方向发展。2005年，英特尔推出首款商用双核奔腾处理器。此后核心数量持续增加。相比单核CPU，多核可以并行运行多个程序线程，指令执行吞吐量大幅提升。这标志着计算性能增强进入并行计算新阶段。\n\u0026ndash;关于超频\u0026ndash; 如果我没记错的话应该也就是这个时候，Intel他妈的开始锁倍频吧； 但是也就是这个时候超频在DIY爱好者里面开始流行起来。 几年后我出生了。我的房间里有一台不用的电脑，那是我舅舅上大学时用的电脑，里面有一件他超频的杰作，也是那个时代DIY爱好者耳熟能详的神器，它的名字叫赛扬300A。 我还是赶上了全民狂热超频的末班车：我自己超频的第一颗CPU是经典的i7-7700K（AMD CPU崛起之前英特尔桌面级最强），时脉4.95GHz。我买不起水冷，如果有水冷的话可能就能上5GHz了。\n并行处理和多线程技术的应用 与多核CPU配套使用的，是各类并行编程技术。操作系统和编程语言广泛支持多线程。例如使用OpenMP等技术进行任务分解，以线程和进程为单位并行执行。这减少线程间同步开销，可有效提高CPU利用率。此外，通用GPU也成为重要的并行加速手段。\n21世纪：移动计算和专用处理器 移动计算的崛起与处理器需求 2000年以后，随着智能手机和平板电脑的兴起，移动计算获得了前所未有的发展。移动设备处理器需要兼顾性能和电池寿命，芯片制造商积极采用更先进的制程来满足这一需求。\n高效处理器在智能手机和平板电脑中的应用 Qualcomm、苹果、三星等厂商针对移动设备推出了专门优化的高性能处理器系列，如Snapdragon、苹果A系列、三星Exynos等。这些处理器采用了先进的工艺制程，集成了多核心CPU、图形处理器GPU、人工智能加速器、模式识别处理器等子系统。\n* 英特尔Xeon系列处理器的关键技术 多核心与超线程技术 Xeon多核心设计和超线程技术使得单个处理器能够同时处理更多的任务，显著提高了计算效率和响应速度，提高了处理器的整体性能。\n高速互连与内存技术 Xeon采用了先进的高速互连技术，如英特尔的QuickPath Interconnect (QPI) 和 Ultra Path Interconnect (UPI)。此外，Xeon系列在内存技术方面也取得了进步，支持更大的内存容量、内存位宽和更快的内存速度，这对于数据密集型应用尤为重要。\n* AMD EPYC系列处理器的关键技术 多核心设计 EPYC以其多核心（堆料）设计著称。目前最强的EPYC处理器拥有高达128个核心，这对于运行大规模虚拟化环境和高性能计算应用尤为重要。\n能效比优化 EPYC处理器在能效比方面也取得了显著成就。AMD通过优化芯片架构和制程技术，实现了高性能与低能耗的平衡。这对于构建能效更高的数据中心和降低运营成本至关重要。\n高速互连技术 AMD的Infinity Fabric技术为EPYC系列带来了高速的互连能力。\n* 苹果M系列芯片的关键技术 ARM架构 苹果M系列芯片基于ARM架构，这使得它们在能效和性能方面都非常出色，很适合搭载在移动设备和轻薄笔记本电脑上。\n统一内存架构 苹果M系列芯片采用了统一内存架构，允许CPU和GPU共享同一内存池，从而提高了数据处理速度和效率。\n集成GPU 苹果M系列芯片集成了强大的GPU，为图形密集型应用和游戏提供了优异的性能，有助于减少功耗和提高系统的整体能效。\n未来的处理器技术展望 在处理器技术的未来发展中，可能有以下关键趋势：\nAI和机器学习的深入集成\n跨架构软件兼容性的提升\n更先进的制程技术\n量子计算的探索\n异构计算的进一步发展\n","date":"2023-12-12T10:11:26+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216165213.png","permalink":"https://Multipleriver.github.io/p/cpu%E5%8F%91%E5%B1%95%E5%8F%B2/","title":"CPU发展史"},{"content":" 1 微机原理课后写着玩玩系列 CPU和GPU的区别 简介 CPU的主要功能是解释计算机指令以及处理计算机软件中的数据。\nGPU是图形系统结构的重要元件，是连接计算机和显示终端的纽带。\nGPU的发展 光栅化显示系统离不开图形处理器。早期的显卡只包含简单的存储器和帧缓冲区，它们实际上只起了一个图形的存储和传递作用，一切操作都必须由CPU来控制。\n这对于文本和一些简单的图形来说是足够的，但是当要处理复杂场景特别是一些真实感的三维场景，单靠这种系统是无法完成任务的。 所以后来发展的显卡都有图形处理的功能。它不单单存储图形，而且能完成大部分图形功能，这样就大大减轻了CPU的负担，提高了显示能力和显示速度。\n主要区别列表 |参数| CPU | GPU | | \u0026ndash; | \u0026ndash; | |通用性|通用|专用| |核心数|少|超级多| | 线程数 | 少 | 多 | | reg数 | 少 | 多 | | cache容量 | 大 | 小（计算卡的也不小）| | SIMD | 小 | 大 | | 时钟频率 | 较高 | 较低 | | 运算延迟 | 相对较小 | 相对较大 | | 数据吞吐量 | 相对较小 | 相对较大 | |功耗|相对较低|相对较高| |单核心任务复杂程度|复杂|简单| | 任务调度 | 通过操作系统调度 | 无复杂调度 | | 控制逻辑 | 复杂 | 简单 | | 优化电路 | 相对复杂 | 相对简单 |\nCPU需要很强的通用性来处理各种不同的数据类型，同时又要逻辑判断又会引入大量的分支跳转和中断的处理。这些都使得CPU的内部结构异常复杂。 GPU面对的则是类型高度统一的、相互无依赖的大规模数据和不需要被打断的纯净的计算环境。 综上所述：\nCPU被设计用于执行各种不同类型和级别的串行任务，包括操作系统运行、应用程序执行、数据处理等，适用于广泛的计算任务。 GPU包含大量小而高效、能同时处理多个相似任务的核心，最初设计用于图形渲染，在不断发展的过程中向着并行处理而优化。这种并行性使GPU适合处理大规模数据集，执行相同计算的多个任务。 GPU的计算速度比CPU快得多？emm，GPU相对于CPU的速度取决于执行的计算类型。 为什么GPU适合炼丹 一、并行处理优势 图形卷积计算的filter是一个接一个地依次进行、每次计算独立于其他计算的。\n因此卷积神经网络的许多计算都可以分解成更小的计算单元，且小的计算集不会相互依赖，它是高度并行的。\nGPU在机器学习领域大展身手的原因也是跟他们的特点有关。机器学习任务通常牵涉到大规模数据并行计算，而GPU高并行性使得它们在处理并行计算任务时表现卓越。\n二、浮点计算优势 浮点运算的结果不是准确值，它的精度取决于数据位宽。 要解决精度问题，也只能提高位宽。\n计算单元位宽 实际使用的单精度浮点是32位，双精度是64位。 CPU的FPU率先支持了更高宽度的数据。英特尔的CPU计算浮点的时候内部精度是80位，输出输入还是64位；但很多GPU（一般Nvidia非专业卡现在都给蔽了双精度）都是单精度32位的，专业计算卡现在一般都是64位。\nCPU和GPU浮点运算性能比较 CPU的FPU和逻辑单元、核心数量和频率都是同步的。每个FPU必须配对全套的逻辑和编解码单元以保证编程方面的兼容性。这也许也是就限制了CPU的核心做不了太多的一个因素。 反正核心就那么几个，只能把CPU单核频率上升到很高的水平，支持各种超级宽的数据格式。\n而相比之下，GPU就是大批大批的小型FPU，其他的东西能少就少。 GPU擅长的是数值计算，不擅长处理分支和随机读写。\n如果只做一道浮点运算，其实是CPU更快（频率更高嘛）。\n但问题的关键是，通常来说浮点运算都是大批量的任务且互相之间没有关联。这种情况下，复杂的浮点运算就变成一个并行问题了（和第一个原因有所重合），GPU大批量低频小FPU就有显著优势了（一言以蔽之，堆料也）。\n综上所述，GPU浮点运算能力得到充分发挥的前提是：\n任务向量化 连续读写 任务分支少 而神经网络就是一个这样的模型。\n三、Nvidia的努力 是的没错，Nvidia的不断努力也是GPU适合神经网络的重要原因。 Nvidia想方设法让GPU突破传统，装载更多先进的单元以应对更复杂的任务。没有Nivida，GPU最起码不会这么适配神经网络计算。\n其中比较有代表性的就是张量计算核心TC。 矩阵运算和张量运算是TC加速的主要对象，\n硬件加速：与传统的GPU相比，TC是专门设计用于数学计算的硬件，因此在执行矩阵和张量运算时具有显著的加速效果。这使得GPU成为深度学习任务的理想选择。 资源优化：GPU中的资源分配对性能至关重要。在一个流式多处理器（SM）中，拥有TC能大大降低共享内存访问和FFMA操作的成本，让每个线程专注于更多的计算，而不是计算索引。 在深度学习中的应用在深度学习中，TC的应用广泛，包括矩阵乘法、卷积运算、元素级操作以及其他数学运算。这些操作构成了深度学习模型的基础，而TC的高性能和并行计算能力有助于加速训练和推理过程。\n四、生态支持 GPU得到了TensorFlow、PyTorch等主流深度学习框架的良好支持，这使得开发者可以很方便地使用GPU进行深度学习的开发。\n这确实很重要。之前苹果联盟了Pytorch，然后发现M3芯片的笔记本跑Stable Difussion比以前快的不是一个档次，比大部分显卡都快。。。\n总结：什么类型的程序适合在GPU上运行？ 易映射并行 计算密集型 任务向量化 随机读写少 任务分支少 ","date":"2023-12-10T16:37:06+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216170058.png","permalink":"https://Multipleriver.github.io/p/cpu%E5%92%8Cgpu/","title":"CPU和GPU"},{"content":" 从今年10月份开始，我陆续参与了学校开展的五次党课，积极和老师、党员同志们交流，收获甚丰，尤其对党的自我革命这一话题有所感想。\n结合思政必修课和日常自我学习的内容，我就党推进自我革命的百年历程、宝贵经验和实践成效，从以下几个部分谈谈我的党课学习心得：\n1. 党推进伟大自我革命的百年历程 1.1 第一次自我革命：八七会议 八七会议是党在早期探索中国革命遭受挫折危急关头的一次自我革命。\n中国共产党成立后不久，便投入到轰轰烈烈的大革命运动中，但由于缺乏革命斗争经验，对主导北伐战争的国民党领导集团政治警觉不够。1927年北伐胜利进军时，蒋介石、汪精卫集团相继背叛革命，屠杀大量革命群众和共产党人。\n在大革命面临失败的紧要关头，党中央于1927年8月7日在湖北汉口召开会议，检讨党的工作，批判大革命后期右倾机会主义错误，确立了实行土地革命和武装起义的总方针。\n会议通过的《中国共产党中央执行委员会告全党党员书》中指出：\n“我们党公开承认并纠正错误，不含混不隐瞒，这并不是示弱，而正是证明中国共产主义运动的力量。”\n会议制定的继续进行革命斗争的正确方针，使全党重新鼓起同国民党反动派斗争的勇气，开启了中国共产党独自担当起领导中国革命艰巨使命的伟大征程。\n1.2 第二次自我革命：遵义会议 遵义会议是在极端危急关头实现党的历史伟大转折的一次自我革命。\n1935年1月15日至17日，中央政治局在贵州遵义召开扩大会议，批评博古、李德在军事指导上的错误。毛泽东的发言不仅对他们在军事指导上的错误进行了深刻分析，而且阐述了中国革命战争的战略战术问题和此后在军事上应该采取的方针。会议改组中央领导机构，选举毛泽东为中央政治局常委，决定仍由朱德、周恩来指挥军事。2月初在川滇黔交界的“鸡鸣三省”村子举行会议，政治局常委再作分工，由张闻天代替博古在中央负总责，毛泽东为周恩来在军事指挥上的帮助者。3月中旬，中央政治局在遵义附近的苟坝召开扩大会议。根据毛泽东提议，重新成立“三人团”代表政治局全权指挥军事，以周恩来为团长，成员为毛泽东和王稼祥。\n遵义会议以来的这些重大决策，在长征濒临绝境时挽救了党和红军，挽救了中国革命，是党的历史上一个生死攸关的转折点。从此，党就在以毛泽东同志为核心的第一代中央领导集体正确领导下，带领中国革命走向胜利。\n1.3 第三次自我革命：延安整风 延安整风运动是党在抗战时期通过总结历史经验，从思上批判以王明为代表的\u0026quot;左\u0026quot;倾教条主义错误，提高全党马克思主义理论水平的一次自我革命。\n遵义会议后，党从军事上、政治上纠正了王明“左”倾错误，但一直没有来得及从思想上系统地彻底清算这种错误。有鉴于此，加强党的建设，解决党内思想矛盾，批判党的历史错误，克服好的思想意识，提高全党特别是高级干部的马克思主义水平就非常必要。它既是一次全党范围的马克思主义的思想教育运动也是破除党内把马克思主义教条化、把共产国际和苏联经验神圣化错误倾向的思想解放运动，对于全党同志特别是党的高级干部坚持一切从实际出发，理论联系实际的马克思主义思想路线具有深远意义。\n在学习延安整风运动的时候，我对比了国共两党治党的两大典型案例：黄克功杀女友案和张灵甫杀妻案。\n\u0026ndash;黄克功杀女友案是延安时期我们党的自我革命的典型案例\u0026ndash; 黄克功，江西南康人，1911年出生。1929年参加了中国工农红军，经历过井冈山斗争和二万五千里长征，参加过多次战斗，负过重伤，在长征中立过大功，历任红军班长、排长、连长、团长等职，也曾从事过师团政治工作。红一、二、四方面军会师时，年仅26岁的黄克功已是身经百战的红军旅长。\n1937年10月5日晚饭后，黄克功因感情纠纷，恼羞成怒，开枪射杀其女友刘茜，酿成轰动一时的杀妻案。\n国内外一些报刊把它当成共产党的“桃色案件”，大肆渲染，攻击和污蔑边区政府 “无法无天”、“蹂躏人权” ，引起了部分不明真相人士的猜疑和不满；边区社会各界也议论纷纷，看法不一。\n边区组织讨论，围绕杀与不杀，争议不下。\n毛泽东很愤怒：\n“这是什么问题？这是什么问题？这样的人不杀，我们还是共 产党吗？”\n“黄克功过去斗争历史是光荣的，今天处以极刑，我及党中央的同志都是为之 惋惜的。但他犯了不容赦免的大罪，以一个共产党员、红军干部而有如此卑鄙的， 残忍的，失掉党的立场的，失掉革命立场的，失掉人的立场的行为，如为赦免，便 无以教育党，无以教育红军，无以教育革命者，并无以教育每一个普通的人。”\n\u0026ndash;张灵甫杀妻案是国民党从宽治党的反面典型\u0026ndash; 1935年冬，张灵甫带妻子回老家探亲，借住在西安张灵甫的堂哥家中，后将吴海兰枪杀。事发后，吴海兰的哥哥吴正有状告张灵甫，希望借助法律严惩凶手。\n法院和军方接到状纸并未及时作出回应。吴正有写了控告信递给西安的妇女协会。张学良的夫人于凤至来到了西安，妇女协会的人将吴正有的控告信转到了她手中。于凤至回到南京将此事说给了宋美龄。蒋介石吩咐将张灵甫送交南京军事法庭查办。\n胡宗南接到严惩张灵甫命令后，张灵甫提出投案，去南京自首，被判死刑，择期处决。这时张灵甫染上了疟疾。典狱长安排狱医为张灵甫治病，病好后张灵甫向军事法庭递交了申诉书。法庭接受了他的申辩，对他的原判并没有被执行。\n1937年，卢沟桥事变爆发后，南京国民政府下令，所有服刑官兵，除“政治犯”外，一律调服军役，并保留原来军衔。张灵甫的老上司王耀武便向蒋介石为张灵甫求情，随即，张灵甫被秘密释放，去了王耀武处任上校候差员。张灵甫将先前用名“张钟麟”更改为“张灵甫”。\n蒋介石赦一张灵甫，毒瘤暗生，法乱而后功溃；毛泽东毙一黄克功，三军整肃，法立而后功成。国民党高层选择御人心术，使用小手段收买将领，却让军纪、法律成为空文；而我们党行的是人间正道，虽然痛失将领，却让军纪严明、号令如山、道义无价。前几年，电影黄克功案件上演，成为依法从严治党、依法从严治军的历史镜鉴。\n延安整风的直接成果，就是既为制定《关于若干历史问题的决议》、确定毛泽东思想为党的指导思想奠定了理论基础，也夺取抗日战争的胜利和新民主主义革命在全国的胜利奠定了政治基础。\n1.4 第四次自我革命：“两个务必” 在党的七届二中全会谋划筹建新中国时，毛泽东提出务必继地保持谦虚、谨慎、不骄、不躁的作风，务必继续地保持艰苦奋斗的作风的思想，作为执政警钟。\n新中国成立后，党中央践行“两个务必”思想。1950年下半年开始，整风运动全面展开；1951年春开展整党运动，为党在全国执政的新的历史条件下坚持共产党员先进性进行教育；1951年底，党中央又决定将正在开展的“三反”运动与整党结合，严肃批判与处理部分党员干部存在的贪污、浪费、受贿等腐化堕落为。其中最引人注目的是从严处理了号称共和国反腐第一案的刘青山、张子善事件，开启了从严治党、清廉治国的良好风气。\n1.5 第五次自我革命：拨乱反正 1976年10月粉碎“四人帮”的胜利，从危难中挽救了党和国家，挽救了社会主义。\n1978年底召开的党的十一届三中全会是新中国成立我党历史上具有深远意义的伟大转折。全会开始实现从“两个凡是”到解放思想、实事求是，从以阶级斗争为纲到以经济建设为中心，从僵化半僵化、封闭半封闭到对外开放的历史性转变。全会还充分肯定必须完整地准确地掌握毛泽东思想的科学体系，开始全面地认真地纠正“文化大革命”中及其以前的“左”倾错误，审查和解决了一批重大冤假错案和一些重要领导人的功过是非问题。这标志着我们党重新确立马克思主义的思想路线、政治路线和组织路线。\n1978年12月，党的十一届三中全会在北京召开。会议作出把全党工作着重点转移到社会主义现代化建设上来，实行改革开放的历史性决策。党中央作出“执政党的党风问题是有关党的生死存亡的问题”的重要论断，出台《关于党内政治生活的若干准则》，恢复重建的中央纪委围绕端正党风、确保党中央路线方针政策的贯彻执行、改进纪律检查工作等问题开展卓有成效的工作，开启了党的纪律建设新时期。\n《关于党内政治生活的若干准则》 一、坚持党的政治路线和思想路线； 二、坚持集体领导，反对个人专断； 三、维护党的集中统一，严格遵守党的纪律； 四、坚持党性，根绝派性； 五、要讲真话，言行一致； 六、发扬党内民主，正确对待不同意见； 七、保障党员的权利不受侵犯； 八、选举要充分体现选举人的意愿 九、同错误倾向和坏人坏事作斗争 十、正确对待犯错误的同餐，不准搞特权； 十二、努力学习，做到又红又专。\n1981年通过的《关于建国以来党的若干历史问题的决议》，又标志着我们党实现了指导思想的拨乱反正。《决议》指出：\n“我们党敢于正视和纠正自己的错误，有决心有能力防重犯过去那样严重的错误。‘坚持真理，修正错误’，这是我们党必须采取的辩证唯物主义的根本立场。过去采取这个立场，曾使我们的事业转危为安，转败为胜。今后继续采取这个立场，必将引导我们取得更大胜利。”\n1.6 第六次自我革命：全面从严治党新征程 党的十八大以来开启的全面从严治党新征程是中国特色社会主义进入新时代的伟大自我革命。\n改革开放以来我们党把马克思主义基本原理同中国改革开放的具体实际结合起来，团结带领人民进行建设中国特色社会主义新的伟大实践。\n以习近平同志为核心的党中央提出全面从严治党战略，以雷露万钧之势开展反腐败斗争，标本兼治，坚持“打虎”“拍蝇”“猎狐”无禁区、全覆盖、零容忍。\n党中央严肃查处了从中央到地方一批腐败变质的领导干部和重大案件，反腐败斗争取得压倒性胜利。\n全面从严治党这场伟大的自我革命，校正了党和国家前进的航向，解决了党和国家事业发展带有全局性、根本性、方向性的问题。它在理论上将对党的建设规律认识提到新高度，在实践上深得党心民心，更加巩固了执政基础。\n2. 党推进伟大自我革命的宝贵经验 2.1 必须坚决维护党中央权威和集中统一领导，确保全党步调一致、行动统一 治理好我们这样一个大党、治理好我们这样一个大国，保证党的团结和集中统一至关重要，维护党中央权威至关重要。因此，坚决维护习近平总书记党中央的核心、全党的核心地位，坚决维护党中央权威和集中统一领导，是新时代推进党和国家各项事业的根本保证。\n2.2 必须坚持治国必先治党、治党务必从严，确保党成为中国特色社会主义事业的中流砥柱 治国必先治党、治党务必从严，这是坚持党的先进性和纯洁性，增强党的政治领导力、思想引领力、群众组织力、社会号召力，确保我们党永葆旺盛生命力和强大战斗力的根本途径。\n党的十八大以来，党中央先后审议通过了90多部中央重要党内法规，超过现行有效的170多部党内法规的50%。一系列关于加强党内法规制度建设的决策部署，立足实际、着眼长远，环环相扣、梯次推进，推进力度之大、建章立制之多、执规执纪之严、社会反响之好，在中国共产党百年制度建设史上前所未有，彰显了党中央对加强党内法规制度建设的高度重视，对党的建设规律的深刻洞见，对全面推进制度治党、依规治党的坚定决心。\n2.3 必须坚持以人民为中心，确保立党为公、执政为民 党的十九届六中全会通过的《中共中央关于党的百年奋斗重大成就和历史经验的决议》全面总结党的百年奋斗重大成就和历史经验，强调：\n“全党必须永远保持同人民群众的血肉联系”。\n党的最大政治优势是密切联系群众，党执政后的最大危险是脱离群众；民心是最大的政治，一个政党，一个政权，其前途和命运最终取决于人心向背；江山就是人民、人民就是江山，打江山、守江山，守的是人民的心；老百姓是天，老百姓是地，忘记了人民，脱离了人民，我们就会成为无源之水、无本之木，就会一事无成。\n2.4 必须坚持改革创新、艰苦奋斗作风，确保党始终走在时代前列 艰苦奋斗精神是中华民族的优良传统，也是我们党巩固执政地位、提高执政能力必备的政治素养。\n习近平总书记指出：\n“只有不忘初心、牢记使命、永远奋斗，才能让中国共产党永远年轻。只要全党全国各族人民团结一心、苦干实干，中华民族伟大复兴的巨轮就一定能够乘风破浪、胜利驶向光辉的彼岸。”\n新时代党的建设伟大工程，是把党建设成为勇于自我革命、经得起各种风浪考验的马克思主义执政党。推进党的自我革命，必须敢于刀刃向内，自我净化、自我完善、自我革新、自我提高，必须坚持改革创新、艰苦奋斗作风，提高党的战斗力和生命力，确保党始终走在时代前列。\n2.5 必须坚决同消极腐败现象作斗争，确保党永葆清正廉洁的政治本色 永葆共产党人政治本色，既是严肃的政治问题，也是现实的实践问题。\n2019年1月11日，习近平在十九届中央纪律检查委员会第三次全体会议上的讲话中强调：\n“改革开放40年来，在党中央坚强领导下，各级纪检监察机关坚持党的领导、从严管党治党，探索积累了宝贵经验。这就是，必须坚决维护党中央权威和集中统一领导，确保全党步调一致、行动统一；必须坚持治国必先治党、治党务必从严，确保党成为中国特色社会主义事业的中流砥柱；必须坚持以人民为中心，确保立党为公、执政为民；必须坚持改革创新、艰苦奋斗作风，确保党始终走在时代前列；必须坚决同消极腐败现象作斗争，确保党永葆清正廉洁的政治本色。”\n公道正派才能出清风正气，廉洁自律才能塑良好形象。每个党员、干部一定要提高政治站位，增强行动自觉，更好地筑牢信仰之基、补足精神之钙、把稳思想之舵，在永葆政治本色上干在实处、走在前列。\n3. 新时代党推进伟大自我革命的实践成效 习近平总书记所作的党的二十大报告，高举中国特色社会主义伟大旗帜，站在中国共产党百年奋斗和新时代10年伟大变革新的历史起点上，宣示了新时代新征程中国共产党的使命任务，开辟了马克思主义中国化时代化新境界，是以中国式现代化全面推进中华民族伟大复兴的政治宣言和行动纲领。报告深刻指出，全面建设社会主义现代化国家、全面推进中华民族伟大复兴，关键在党，必须弘扬伟大建党精神，坚定不移全面从严治党，以党的自我革命引领社会革命。我们要认真学习领悟党的二十大精神，一刻不停歇地推进全面从严治党，努力把党建设得更加坚强有力，引领和保障中国特色社会主义伟大事业继往开来、行稳致远。我们要深入学习贯彻习近平总书记关于党的自我革命的战略思想，增强“四个意识”、坚定“四个自信”、做到“两个维护”，坚定不移推进党的自我革命，推动全面从严治党向纵深发展。\n新时代我们党以刀刃向内的勇气和刮骨疗毒的决心，把自我革命的课题推向深入，实现“四个自我”，坚持四个“相统一”，抓好“关键少数”，深化运用“四种形态”，落实“三个区分开来”，坚持真理、修正错误，以伟大自我革命引领伟大社会革命，以伟大社会革命促进伟大自我革命，我们党就能在应对国内外各种风险挑战的历史进程中始终成为全国人民的主心骨，引领和推动新时代中国特色社会主义航船劈波斩浪、一往无前。\n","date":"2023-11-20T12:17:03+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240217091537.png","permalink":"https://Multipleriver.github.io/p/%E5%85%9A%E7%9A%84%E8%87%AA%E6%88%91%E9%9D%A9%E5%91%BD/","title":"党的自我革命"},{"content":"为什么Laplace变换（LT）的积分区间是$0-$到$+\\infty$ 连续时域的系统分析需要确定$0+$状态（初始状态）的值，某些时候需要通过$0-$状态（起始状态）的值，结合具体电路推断初始状态值；但是Laplace变换为什么可以跳过求解初始状态这一阶段，直接将起始状态和所求状态联系起来呢？\n我学复变函数的时候，也接触过FT,LT的相关性质，当时LT的微分性质中可不是写的$0-$，而是直接写的$0$。为什么到信号系统分析里面就不一样了？\n信号与系统教案：\n复变函数教材：\n一个误区 首先在想到这个问题的时候，我是默认数学教材的叙述会更加严密，更加理论化，适用范围也更加广泛，但实际并非如此。\n数学书上可能仅仅只是描述了函数在$0$处连续的情况（默认时域连续），而信号分析里面显然会有很多不连续的情况，所以我不能以一本工科数学的“工具书”为准，不能把它的叙述奉为圭臬，而应该从LT本身出发来看为什么会出现这种情况。\n一种改进 LT是一种改进版的FT，他们都是对信号进行投影（或言分解，或言基变换）。LT的改进之处在于：\n从代数的角度来看，FT的局限在于很难让一些常见的信号满足绝对可积条件（但是我们没办法，又要用这些信号），故乘以一个指数衰减因子$e^{-\\sigma t}$，尽量使信号在$\\pm\\infty$能够趋向$0$ ，从而绝对可积；\n从信号的角度来看，FT的局限在于，只能把信号分解到幅度恒定不变的基（三角函数）上面，但是幅值恒定意味着这只能表述无阻尼系统（或者是有阻尼系统的伯德图？听说过但是没学过，反正意思就是能表述的情况比较理想，比较局限）。把$j \\omega t$扩展为$(\\sigma+j \\omega) t$意味着可以分解信号至幅度和频率都变化的基上，泛用性更强。\n少考虑一点，再多考虑“一点” FT的积分区间是双边无穷，这是毫无疑问的，在哪儿都是。所以按理说LT改进FT，只是改进了上述的问题，并不影响积分区间.但为什么LT的积分区间被砍掉了只剩正半轴了呢？\n一个很重要的原因是：在$t\u0026lt;0$ 时，衰减因子$e^{-\\sigma t}$不仅不会限制信号，反而会变为增长因子。尽管存在双边LT，但是在更普遍的单边LT中，$t\u0026lt;0$ 的积分区域被去除了。\n但这并不意味着我们宁可为了使$e^{-\\sigma t}$ 变为衰减因子，也要删掉负半轴的积分区间，损失这部分信号。这是因为存在一个客观的巧合。几乎介绍LT的书上都会说这样一句话：\n“考虑到在实际问题中遇到的总是因果信号，令信号起始时刻为$0$……”\n这是一种简化。$t\u0026lt;0$的时候衰减因子$e^{-\\sigma t}$“叛变”，但由于没信号（有信号的话我们也可以人为设定零点），我们才可以恰巧规定积分区间为$0$ 到$+\\infty$ ，而不会漏掉信号。\n在实际分析信号的时候，$0-$到$0+$的跳变是不可以忽略，故我们就“勉为其难”地把积分区间变宽一点，把“不规矩”的那部分$0-$到$0+$的跳变考虑进去就行。我们的目的是在衰减因子$e^{-\\sigma t}$有效的情况下，把所有信息都囊括进去。\n假如此信号在$t\u0026lt;5$的时候都没有幅度，也可以把LT的积分区间变成$5-$到$+\\infty$。\n这也能解释为什么分析实际的电路模型在有跳变的情况下能够使用$0-$和$0+$两种模型进行分析，而仅仅只有微分方程的模型却不可以。\n在实际电路里面，看似使用$0+$状态分析少考虑了$0-$到$0+$的跳变，实则不然；电路元件的性质代替了LT里这个跳变的计算。我们没有在LT里面囊括这个跳变，却在电路元件的特殊性质里面考虑到了，具体体现为电容电压和电感电流的连续性（不可突变）。通过电容电感的特殊性质，我们能把$0-$状态的情况转移到$0+$状态，这能使我们更加专注于$0$之后的信号，尽管牺牲了一些计算上的便捷。\n而在微分方程表述的电路中，没有具体的场景供我们使用换路定则，若仅得知$0-$状态的情况是无法推断$0+$状态的情况的。\n我们在LT里面少考虑了“一点”，却在电路里面多考虑了一点。\n","date":"2023-06-01T12:30:01+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216165822.png","permalink":"https://Multipleriver.github.io/p/%E5%85%B3%E4%BA%8E%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%8F%98%E6%8D%A2%E7%9A%84%E7%A7%AF%E5%88%86%E5%8C%BA%E9%97%B4/","title":"关于拉普拉斯变换的积分区间"},{"content":"Yank-Note 特色功能使用说明 English | 中文\n[toc]{type: \u0026ldquo;ol\u0026rdquo;, level: [2]}\n应用数据 \u0026lt;home\u0026gt; 为当前操作系统的用户主目录，例如：\nWindows: C:\\Users\\\u0026lt;username\u0026gt; Linux: /home/\u0026lt;username\u0026gt; macOS: /Users/\u0026lt;username\u0026gt; 应用相关的数据目录存放在 \u0026lt;home\u0026gt;/yank-note 下面，点击托盘菜单“打开主目录”即可查看\n目录说明：\n配置文件 \u0026lt;home\u0026gt;/yank-note/config.json\n导出 docx 参考文档 \u0026lt;home\u0026gt;/yank-note/pandoc-reference.docx\n文档历史版本 \u0026lt;home\u0026gt;/yank-note/histories\n[!TIP] 如果您不小心丢失了您的文档数据，您可以到此文件夹尝试找回。\n[!CAUTION] 出于性能的考虑，超过 102400 个字符的文档将不会储存历史记录。因此请谨慎在文档中嵌入 Base64 图片。\n插件 \u0026lt;home\u0026gt;/yank-note/plugins\n主题 \u0026lt;home\u0026gt;/yank-note/themes\n扩展 \u0026lt;home\u0026gt;/yank-note/extensions\n其他用户数据 \u0026lt;home\u0026gt;/yank-note/data\nTOC 生成 需要生成目录的地方写入 [toc]{type: \u0026quot;ul\u0026quot;, level: [1,2,3]} 可以控制目录样式 ul 或 ol 和级别\n待办切换 在预览界面打勾试试\n2021-06-06 10:27 TEST1 2021-06-06 10:27 TEST2 2021-06-06 10:27 TEST3 加密文档 以 .c.md 结尾的文档视为加密文档，可以用来保存机密的信息。 加密和解密过程均在前端完成。 请务必保管好文档密码，密码一旦丢失就只能自己暴力破解了。 Markdown 增强 在编辑器中键入 / 可以获得提示\n高亮：==marked== 上标：29^th^ 下标：H~2~0 脚注：脚注1语法2 Emoji: :) :joy: 缩写： *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C. Github Alerts 此功能使用 markdown-it-github-alerts 实现，支持 Github 风格的警告提示。\n[!NOTE] 注意 突出强调用户在浏览时应该注意的信息。\n[!TIP] 提示 提供可选的信息以帮助用户更加成功。\n[!IMPORTANT] 重要 对于用户成功至关重要的关键信息。\n[!WARNING] 警告 由于潜在风险，需要立即引起用户的注意的关键内容。\n[!CAUTION] 小心 行动的负面潜在后果。\n元素属性书写 此功能使用 markdown-it-attributes 实现。\n红色文字，白色背景，居中和边框{.bgw .text-center .with-border style=\u0026ldquo;color:red\u0026rdquo;} 显示为块元素{.block} 转义语法{style=\u0026ldquo;color:red\u0026rdquo;} 一些内置样式类：\n类名 说明 avoid-page-break 打印/导出PDF时避免页面在此元素中断 new-page 打印/导出PDF时在此元素前分页 skip-print 打印/导出PDF时跳过此元素 skip-export 导出/复制HTML时跳过此元素 inline 当前元素显示为行内元素 block 当前元素显示为块元素 reduce-brightness 使用暗色主题时候降低此元素亮度 bgw 设置当前元素背景为白色 copy-inner-text 标记 “Ctrl/Cmd + 单击左键” 拷贝元素文字 wrap-code 应用于代码块，让其自动换行 text-left 当前元素文字左对齐 text-center 当前元素文字居中对齐 text-right 当前元素文字右对齐 with-border 给当前元素加上边框 图片增强 一个段落下如果只有一个图片元素，默认会渲染成块元素并居中。如果要强制显示为行内元素，可以在图片链接参数后面追加 .inline 如上图所示。 如果要给图片添加白色背景优化展示效果（针对某些透明图片）,可以在图片链接参数后面追加 .bgw 如： 可以使用markdown-it-imsize的方式来设置图片尺寸 例如这是一个宽度为 16px 的图片: ![](logo-small.png =16x) 思维导图 只需要在列表根节点加上 {.mindmap} 即可。\n中心节点{.mindmap} [1] 状态可见原则 [2] 环境贴切原则 [3] 用户可控原则 [4] 一致性原则 [5] 防错原则 [6] 易取原则 [7] 灵活高效原则 [8] 优美且简约原则 [9] 容错原则 [10] 人性化帮助原则 脑图使用 kityminder-core 实现。\nMermaid 图形 graph LR A[Hard] --\u003e|Text| B(Round) B --\u003e C{Decision} C --\u003e|One| D[Result 1] C --\u003e|Two| E[Result 2]\rsequenceDiagram Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!\rgantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d\rstateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*]\rpie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15\rjourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me\rPlantUML 图形 您可以在 设置 中配置使用本地端点或 PlantUML 在线端点来生成图形。\n[!IMPORTANT] 如果使用本地端点，则系统需要有 Java 环境，并安装有 Graphviz 如果提示 Cannot find Graphviz，请参考 Test your GraphViz installation\n示例如下\n@startuml a -\u0026gt; b @enduml\n表格增强 此功能使用 markdown-it-multimd-table 实现 支持在表格中使用多行文本和列表。支持表格说明渲染\n您可以双击/右键单元格快捷编辑单元格内容，相关快捷键：\nDBLClick: 编辑单元格 Escape: 退出编辑 Enter: 确认编辑并编辑下一行 Shift + Enter: 确认编辑并编辑上一行 Cmd/Ctrl + Shift + Enter: 确认编辑并插入下一行 Tab: 确认编辑并编辑下一列 Shift + Tab: 确认编辑并编辑上一列 First header Second header List: More \\ over | data \\ several | Test | Test [测试表格] First header Second header AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB AAAAAAAAAAAA BBBBBBBBBBBBBB Test Test [小尺寸表格] {.small} h1 h2 h3 x1 x2 x3 {rowspan=2 style=\u0026ldquo;color:red\u0026rdquo;} x4 {colspan=2} [合并单元格] Katex 公式 此功能由 KaTeX 提供。\n$$ \\begin{array}{c} \\nabla \\times \\vec{\\mathbf{B}} -, \\frac1c, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} \u0026amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\nabla \\cdot \\vec{\\mathbf{E}} \u0026amp; = 4 \\pi \\rho \\ \\nabla \\times \\vec{\\mathbf{E}}, +, \\frac1c, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} \u0026amp; = \\vec{\\mathbf{0}} \\ \\nabla \\cdot \\vec{\\mathbf{B}} \u0026amp; = 0 \\end{array} $$\nequation description $\\nabla \\cdot \\vec{\\mathbf{B}} = 0$ divergence of $\\vec{\\mathbf{B}}$ is zero $\\nabla \\times \\vec{\\mathbf{E}}, +, \\frac1c, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} = \\vec{\\mathbf{0}}$ curl of $\\vec{\\mathbf{E}}$ is proportional to the rate of change of $\\vec{\\mathbf{B}}$ $\\nabla \\times \\vec{\\mathbf{B}} -, \\frac1c, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\nabla \\cdot \\vec{\\mathbf{E}} = 4 \\pi \\rho$ what? 运行代码 支持运行 JavaScript PHP nodejs Python bash bat 代码。 此功能执行外部命令实现，所以需要安装相应环境。\n代码块第一行需要包含以 --run-- 字符串，示例如下\n1 2 3 4 // --run-- await new Promise(r =\u0026gt; setTimeout(r, 500)) ctx.ui.useToast().show(\u0026#34;info\u0026#34;, \u0026#34;HELLOWORLD!\u0026#34;) console.log(\u0026#39;HELLOWORLD\u0026#39;) 1 2 // --run-- --output-html-- console.log(`output \u0026lt;i\u0026gt;HTML\u0026lt;/i\u0026gt;`) 1 2 // --run-- console.log(\u0026#39;HELLOWORLD\u0026#39;) 1 2 // --run-- echo \u0026#39;HELLOWORLD!\u0026#39;; 1 2 # --run-- print(\u0026#39;HELLOWORLD\u0026#39;) 1 2 # --run-- date 1 2 REM --run-- @echo HELLOWORLD 1 2 3 4 5 6 7 8 // --run-- gcc $tmpFile.c -o $tmpFile.out \u0026amp;\u0026amp; $tmpFile.out #include \u0026lt;stdio.h\u0026gt; int main () { printf(\u0026#34;Hello, World!\u0026#34;); return 0; } 1 2 3 4 5 6 7 // --run-- java $tmpFile.java class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } 集成终端 使用 Alt/Option + T 或者点击状态栏 切换终端 菜单唤起集成终端 支持在编辑器中选中一段代码后按下 Shift + Alt/Option + R 直接在终端中运行命令。免去复制粘贴。 切换内置终端工作目录到当前目录 右键目录 小工具 支持在文档中嵌入 HTML 小工具。 HTML 代码块第一行需要包含以 --applet-- 字符串，其余字符串作为小工具标题，示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!-- --applet-- Hash --\u0026gt; \u0026lt;script\u0026gt; function run (type) { const input = document.getElementById(\u0026#39;input\u0026#39;) const output = document.getElementById(\u0026#39;output\u0026#39;) output.value = \u0026#39;\u0026#39; switch (type) { case \u0026#39;md5\u0026#39;: output.value = ctx.lib.cryptojs.MD5(input.value).toString().toLowerCase() break case \u0026#39;sha1\u0026#39;: output.value = ctx.lib.cryptojs.SHA1(input.value).toString().toLowerCase() break case \u0026#39;sha256\u0026#39;: output.value = ctx.lib.cryptojs.SHA256(input.value).toString().toLowerCase() break } output.focus() output.select() } \u0026lt;/script\u0026gt; \u0026lt;div\u0026gt; 输入 \u0026lt;textarea id=\u0026#34;input\u0026#34; style=\u0026#34;display: block; width: 100%\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button onclick=\u0026#34;run(\u0026#39;md5\u0026#39;)\u0026#34;\u0026gt;MD5\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;run(\u0026#39;sha1\u0026#39;)\u0026#34;\u0026gt;SHA1\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;run(\u0026#39;sha256\u0026#39;)\u0026#34;\u0026gt;SHA256\u0026lt;/button\u0026gt; \u0026lt;textarea id=\u0026#34;output\u0026#34; style=\u0026#34;display: block; width: 100%\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button onclick=\u0026#34;document.getElementById(\u0026#39;input\u0026#39;).value = \u0026#39;\u0026#39;; document.getElementById(\u0026#39;output\u0026#39;).value = \u0026#39;\u0026#39;\u0026#34;\u0026gt;清空\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;var x = document.getElementById(\u0026#39;output\u0026#39;); x.value = x.value.toUpperCase()\u0026#34;\u0026gt;结果大写\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; 如果没有标题，将没有外部边框装饰\n1 2 \u0026lt;!-- --applet-- --\u0026gt; \u0026lt;button onclick=\u0026#34;ctx.ui.useToast().show(`info`, `HELLOWORLD!`)\u0026#34;\u0026gt;HELLO\u0026lt;/button\u0026gt; ECharts 图形 Js 代码块第一行包含以 --echarts-- 字符串会被解析成 ECharts 图形，示例如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // --echarts-- const option = { // backgroundColor: \u0026#39;#2c343c\u0026#39;, title: { text: \u0026#39;Customized Pie\u0026#39;, left: \u0026#39;center\u0026#39;, top: 20, textStyle: { color: \u0026#39;#888\u0026#39; } }, tooltip : { trigger: \u0026#39;item\u0026#39;, formatter: \u0026#34;{a} \u0026lt;br/\u0026gt;{b} : {c} ({d}%)\u0026#34; }, visualMap: { show: false, min: 80, max: 600, inRange: { colorLightness: [0, 1] } }, series : [ { name:\u0026#39;访问来源\u0026#39;, type:\u0026#39;pie\u0026#39;, radius : \u0026#39;55%\u0026#39;, center: [\u0026#39;50%\u0026#39;, \u0026#39;50%\u0026#39;], data:[ {value:335, name:\u0026#39;直接访问\u0026#39;}, {value:310, name:\u0026#39;邮件营销\u0026#39;}, {value:274, name:\u0026#39;联盟广告\u0026#39;}, {value:235, name:\u0026#39;视频广告\u0026#39;}, {value:400, name:\u0026#39;搜索引擎\u0026#39;} ].sort(function (a, b) { return a.value - b.value; }), roseType: \u0026#39;radius\u0026#39;, label: { normal: { textStyle: { color: \u0026#39;#888\u0026#39; } } }, labelLine: { normal: { lineStyle: { color: \u0026#39;#888\u0026#39; }, smooth: 0.2, length: 10, length2: 20 } }, itemStyle: { normal: { color: \u0026#39;#c23531\u0026#39;, shadowBlur: 200, shadowColor: \u0026#39;rgba(0, 0, 0, 0.5)\u0026#39; } }, animationType: \u0026#39;scale\u0026#39;, animationEasing: \u0026#39;elasticOut\u0026#39;, animationDelay: function (idx) { return Math.random() * 200; } } ] } chart.setOption(option, true) Draw.io 图形 链接属性 link-type 值需要是 drawio 字符串。使用链接的形式也不会影响其他 Markdown 解析器解析。\ndrawio{link-type=\u0026ldquo;drawio\u0026rdquo;}\nLuckysheet 表格 链接属性 link-type 值需要是 luckysheet 字符串。使用链接的形式也不会影响其他 Markdown 解析器解析。\n[!WARNING] 现阶段 Luckysheet Bug 较多，使用需谨慎。\nluckysheet{link-type=\u0026ldquo;luckysheet\u0026rdquo;}\n容器块 支持类似 VuePress 容器块 功能，使用 markdown-it-container 实现\n使用\n1 2 3 ::: \u0026lt;type\u0026gt; [title] [content] ::: type 是必需的， title 和 content 是可选的。\n支持的 type 有：tip, warning, danger, details, group, group-item, row, col, section, div\n示例\n::: tip 这是一个提示 :::\n::: warning 这是一个警告 :::\n::: danger 这是一个危险警告 :::\n::: danger STOP 危险区域，禁止通行 :::\n::: details 这是一个 details 标签 :::\n::: details 点击展开更多 这是一个 details 标签 :::\n:::: group 这是标签组 ::: group-item Tab 1 test 1 :::\n::: group-item *Tab 2 test 2 标题前带 * 表示默认激活此选项卡 :::\n::: group-item Tab 3 test 3 ::: ::::\n::::: row 分列示例 :::: col TODO ::: warning Item 1 ::: ::: warning Item 2 ::: ::: warning Item 3 ::: :::: :::: col DONE ::: tip Item 4 ::: ::: tip Item 5 ::: :::: :::::\n:::: row ::: col Column 1 test 1 ::: ::: col Column 2 test 2 ::: ::: col Column 3 test 3 ::: ::::\nAI Copilot 人工智能写作助手 Yank Note 接入了 OpenAI、Google AI 等人工智能平台，可以使用人工智能进行智能补全、文本重写等功能\n[!NOTE] 相关 API token 需要你自行获取。且需要 安装并启用 AI Copilot 扩展\nFront Matter 页面支持类似 Jekyll Front Matter 配置信息\n内置变量\n变量名 类型 描述 headingNumber boolean 是否开启页面标题序号编号 wrapCode boolean 是否开启代码换行 enableMacro boolean 是否开启宏替换 define Record\u0026lt;string, string\u0026gt; 宏定义，定义文本替换 defaultPreviewer string 文档默认的预览器，某些扩展可能提供特殊的预览界面。如 Reveal.js 扩展 mdOptions Record\u0026lt;string, boolean\u0026gt; Markdown-it 解析参数 mdOptions.html boolean 开启 HTML 解析 mdOptions.breaks boolean 转换 \\n 成 \u0026lt;br\u0026gt; mdOptions.linkify boolean 自动转换链接 mdOptions.typographer boolean 开启语言替换和引号美化 katex Record\u0026lt;string, any\u0026gt; Katex 配置 宏替换 [!NOTE] 此功能 高级版可用\nYank Note 允许你在页面中嵌入宏，用以动态地替换文档。\n[!IMPORTANT] 使用前需要先在 Front Matter 开启宏替换，定义 enableMacro: true。\n[!WARNING] 使用宏替换可能会导致源码和预览行号对应不准确，Yank Note 已经尽可能处理，但某些情况可能仍然会出现同步滚动异常。\n文本替换 Front Matter 中的 define 字段可以定义一些文本替换映射。支持在另一个文件定义，支持宏表达式。具体可参考本文件顶部 Front Matter 部分。\n[!TIP] 你还可以在设置中配置 全局宏替换 ，这样所有文档都可以使用。不过，你仍然需要在 Front Matter 中定义 enableMacro: true。\n应用名: \u0026ndash;APP_NAME\u0026ndash; 应用版本: \u0026ndash;APP_VERSION\u0026ndash; 另一个文件的定义: \u0026ndash;TEST_DEFINE\u0026ndash; 宏表达式 语法：\n1 [= \u0026lt;expression\u0026gt; =] 其中 expression 是需要执行的 js 表达式，支持 await/Promise 异步表达式。\n如果表达式中需要包含 [= 或 =] 请输入 [\\= 或 =\\] 转义替换\n一些示例 是否开启页面标题序号编号: [= headingNumber =] 使用变量: [= customVar =] 定义变量: [= $export(\u0026rsquo;testVar\u0026rsquo;, \u0026lsquo;Test\u0026rsquo;) =][= testVar =] 定义函数: [= $export(\u0026lsquo;format\u0026rsquo;, (a, b) =\u0026gt; ${a}, ${b}!) =][= format(\u0026lsquo;HELLO\u0026rsquo;, \u0026lsquo;WORLD\u0026rsquo;) =] 进一步处理: XXXXXXXXXXXXXX [= $afterMacro(src =\u0026gt; src.replace(/X{4,}/g, \u0026lsquo;YYYYY\u0026rsquo;)) =] 应用版本：[= $ctx.version =] 当前文档名: [= $doc.basename =] 当前时间: [= $ctx.lib.dayjs().format(\u0026lsquo;YYYY-MM-DD HH:mm\u0026rsquo;) =] 计数器: [= $seq图- =] | [= $seq图- =] | [= $seq图- =] | [= $seq表- =] | [= $seq表- =] 限定符转义: [= \u0026lsquo;[= =]\u0026rsquo; =] 四则运算: [= (1 + 2) / 2 =] 引用文件（支持最多嵌套 3 层，可使用目标文档中定义的 Front Matter 变量) [= $include(\u0026rsquo;./_FRAGMENT.md\u0026rsquo;, true) =]\n被引用文档中定义的变量：[= customVarFromOtherDoc =] 你的 IP 地址：[= fetch(\u0026lsquo;https://ifconfig.me/ip\u0026rsquo;).then(r =\u0026gt; r.text()) =] 天气预报 1 [= await ctx.utils.sleep(1000), fetch(\u0026#39;https://wttr.in?0AT\u0026#39;).then(r =\u0026gt; r.text()) =] 九九乘法表 [= (function nine (num) { let res = \u0026rsquo;\u0026rsquo; for (let i = 1; i \u0026lt;= num; i++) { let str = \u0026lsquo;\u0026rsquo;; for (let k = 1; k \u0026lt;= num; k++) { if (i \u0026gt;= k) { str += k + \u0026lsquo;x\u0026rsquo; + i + \u0026lsquo;=\u0026rsquo; + i*k + \u0026rsquo; \u0026lsquo;; } } res = res + str + \u0026lsquo;\\n\u0026rsquo; } return res })(9) =] 可用变量 宏表达式可以使用在 Front Matter 定义的变量，也可以使用下面的内置变量\n变量名 类型 描述 $ctx object 编辑器 ctx，可参考插件开发指南 和Api 文档 $include (path: string, trim = false) =\u0026gt; Result 引入其他文档片段方法 $export (key: string, val: any) =\u0026gt; Result 定义一个本文档可以使用的变量 $noop () =\u0026gt; Result 无操作函数，可用于文本占位使用 $afterMacro (fn: (src: string) =\u0026gt; string) =\u0026gt; Result 定义一个宏替换后的回调函数，可用于对替换后的文本进行进一步处理。 $seq (label: string) =\u0026gt; Result 文档内部计数器 $doc object 当前文档信息 $doc.basename string 当前文档文件名（无后缀） $doc.name string 当前文档文件名 $doc.path string 当前文档路径 $doc.repo string 当前文档仓库 $doc.content string 当前文档内容 $doc.status 'loaded', 'save-failed', 'saved' 当前文档状态 命令行参数 在向别人交接文档的时候，可以使用脚本，自定义命令行参数启动程序，方便对方查看文档。\n名称 作用 默认值 说明 示例 \u0026ndash;port 服务器监听端口 3044 端口 \u0026ndash;port=8080 \u0026ndash;disable-tray 禁用常驻托盘 false true/false \u0026ndash;disable-tray \u0026ndash;readonly 编辑器只读 false true/false \u0026ndash;readonly \u0026ndash;show-status-bar 显示状态栏 true true/false \u0026ndash;show-status-bar=false \u0026ndash;data-dir 数据目录 无 目录路径字符串 \u0026ndash;data-dir=\u0026rsquo;./.data\u0026rsquo; \u0026ndash;init-repo 初始仓库名 无 字符串 \u0026ndash;init-repo=\u0026lsquo;test\u0026rsquo; \u0026ndash;init-file 加载文件路径 无 文件路径，相对于仓库路径 \u0026ndash;init-file=\u0026rsquo;/1.md\u0026rsquo; 自定义样式 右键点击托盘图标，点击“打开主目录”，进入 \u0026lt;主目录\u0026gt;/themes 目录。 复制 github.css 为一个新 CSS 文件，修改 CSS 内容 打开设置 =\u0026gt; 外观 =\u0026gt; 自定义 CSS 切换 CSS 配置 插件开发 请参考插件开发指南\n这是一个脚注\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n这也是一个脚注\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-05-20T12:17:03+08:00","image":"https://multipleriver-img.oss-cn-nanjing.aliyuncs.com/img/yank-note-picgo-img-20240216170449.png","permalink":"https://Multipleriver.github.io/p/%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/","title":"测试页面"}]